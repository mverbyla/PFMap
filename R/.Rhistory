arrows$flowtype<-nodes[arrows$ds_node,"matrix"]
arrows$siblings_solid<-NA
arrows$siblings_liquid<-NA
arrows$iamsolid<-NA
for(i in 1:nrow(arrows)){
arrows$siblings_solid[i]<-sum(arrows$flowtype[which(arrows$us_node==arrows$us_node[i])]=="solid")
arrows$siblings_liquid[i]<-sum(arrows$flowtype[which(arrows$us_node==arrows$us_node[i])]=="liquid")
if(arrows$flowtype[i]=="solid"){arrows$iamsolid[i]<-TRUE}else{arrows$iamsolid[i]<-FALSE}
}
####(((((((this is the end of the old getNodes function)))))))
# transform the K2P data and fit the models
# k2pdata<-suppressWarnings(transformData(k2pdata))
fit_ap<-lm(SQRTlrv ~ SQRThrt+temp+factor(pathogen),data=subset(k2pdata,technology_description=="Anaerobic Pond"))
fit_fp<-lm(SQRTlrv ~ lhrt+temp+factor(pathogen),data=subset(k2pdata,technology_description=="Facultative Pond"|technology_description=="Maturation Pond"))
fit_mp<-lm(SQRTlrv ~ lhrt+temp+factor(pathogen),data=subset(k2pdata,technology_description=="Facultative Pond"|technology_description=="Maturation Pond"))
fit_db<-lm(SQRTlrv ~ SQRTht+SQRTmoist+factor(pathogen),data=subset(k2pdata,technology_description=="Sludge Drying Bed")) #maybe later we can add back SQRT(moist) as a factor
fit_tf<-lm(SQRTlrv ~ factor(pathogen),data=subset(k2pdata,technology_description=="Trickling Filter"))
fit_sd<-lm(SQRTlrv ~ factor(pathogen),data=subset(k2pdata,technology_description=="Sedimentation"))
# find the LRVs for each pathogen group, then solve the DAG!
pathogenGroups<-c("Virus","Bacteria","Protozoa","Helminth")
warnings<-vector(mode="character",length=0)
if(results$In_Fecal_Sludge>0 & any(nodes$subType=="fecal sludge")==FALSE){ #if the onsite system produces fecal sludge but the treatment plant does not accept any
results$To_Surface<-results$In_Fecal_Sludge
warnings[length(warnings)+1]<-"Warning: The onsite sanitation technologies in your system produce fecal sludge, but according to your sketch, the treatment plant does not accept fecal sludge."
results$In_Fecal_Sludge<-0
skipFS<-TRUE
}else{skipFS<-FALSE}
if(results$In_Sewage>0 & any(nodes$subType=="sewerage")==FALSE){ #if the onsite system produces sewerage but the treatment plant does not accept any
results$To_Surface<-results$In_Sewage
warnings[length(warnings)+1]<-"Warning: The onsite sanitation technologies in your system produce sewage, but according to your sketch, the treatment plant does not accept sewage."
results$In_Sewage<-0
skipWW<-TRUE
}else{skipWW<-FALSE}
nodes$loading_output<-NA
arrows$loading<-NA
if(skipFS==FALSE){nodes[nodes$subType=="fecal sludge",]$loading_output<-results$In_Fecal_Sludge}
if(skipWW==FALSE){nodes[nodes$subType=="sewerage",]$loading_output<-results$In_Sewage}
####(((((((this is the beginning of the old estimate, or getLRVs function)))))))
# get the LRVs for each node
#nodes<-estimate(nodes,pathogenType=pathogenType)
# transformation of user data to make predictions
nodes$lhrt<-NA
nodes$lhrt[nodes$subType=="anaerobic pond"|nodes$subType=="facultative pond"|nodes$subType=="maturation pond"]<-log(nodes$retentionTime[nodes$subType=="anaerobic pond"|nodes$subType=="facultative pond"|nodes$subType=="maturation pond"])
nodes$SQRThrt<-sqrt(nodes$retentionTime)
nodes$SQRTht<-sqrt(as.double(nodes$holdingTime))
nodes$ldepth<-NA
nodes$ldepth[nodes$subType=="anaerobic pond"|nodes$subType=="facultative pond"|nodes$subType=="maturation pond"]<-log(nodes$depth[nodes$subType=="anaerobic pond"|nodes$subType=="facultative pond"|nodes$subType=="maturation pond"])
nodes$temp<-nodes$temperature
nodes$temp2<-nodes$temperature^2
nodes$temp3<-nodes$temperature^3
nodes$ltemp<-NA
nodes$ltemp[nodes$subType=="sludge drying bed"]<-log(nodes$temperature[nodes$subType=="sludge drying bed"])
nodes$ltemp<-log(nodes$temperature)
nodes$SQRTmoist<-sqrt(as.double(nodes$moistureContent))
nodes$pathogen<-pathogenType
nodes$fit<-0;nodes$upr<-0;nodes$lwr<-0
# execution of models
if(any(nodes$subType=="anaerobic pond")==TRUE){nodes[nodes$subType=="anaerobic pond",c("fit","lwr","upr")]<-predict(fit_ap,nodes[nodes$subType=="anaerobic pond",],interval="confidence")^2}
if(any(nodes$subType=="facultative pond")==TRUE){nodes[nodes$subType=="facultative pond",c("fit","lwr","upr")]<-predict(fit_fp,nodes[nodes$subType=="facultative pond",],interval="confidence")^2}
if(any(nodes$subType=="maturation pond")==TRUE){nodes[nodes$subType=="maturation pond",c("fit","lwr","upr")]<-predict(fit_mp,nodes[nodes$subType=="maturation pond",],interval="confidence")^2}
if(any(nodes$subType=="sludge drying bed")==TRUE){
if(pathogenType=="Virus"){nodes[nodes$subType=="sludge drying bed",c("fit","lwr","upr")]<-1}else{nodes[nodes$subType=="sludge drying bed",c("fit","lwr","upr")]<-predict(fit_db,nodes[nodes$subType=="sludge drying bed",],interval="confidence")^2}
}
if(any(nodes$subType=="trickling filter")==TRUE){
if(pathogenType=="Helminth"){nodes[nodes$subType=="trickling filter",c("fit","lwr","upr")]<-1}else{nodes[nodes$subType=="trickling filter",c("fit","lwr","upr")]<-predict(fit_tf,nodes[nodes$subType=="trickling filter",],interval="confidence")^2}
}
if(any(nodes$subType=="settler/sedimentation")==TRUE){
if(pathogenType=="Protozoa"|pathogenType=="Helminth"){nodes[nodes$subType=="settler/sedimentation",c("fit","lwr","upr")]<-0}else{nodes[nodes$subType=="settler/sedimentation",c("fit","lwr","upr")]<-predict(fit_sd,nodes[nodes$subType=="settler/sedimentation",],interval="confidence")^2}
}
####(((((((this is the end of the old estimate function)))))))
nodeLRVs<-nodes[,c("name","subType","fit","lwr","upr")]
#######(((((((SOLVE IT SOLVE IT SOLVE IT)))))))
#######(((((((SOLVE IT SOLVE IT SOLVE IT)))))))
#######(((((((SOLVE IT SOLVE IT SOLVE IT)))))))
# solve the DAG
i=0;j=0   # here, j is an index for the nodes and i is an index for the arrows
nN<-nodes$name
while (any(is.na(arrows$loading)) == TRUE | any(is.na(nodes$loading_output)) == TRUE){       ##### each loop focuses on a single node (nN[j+1]) and the arrow (i+1) that is going into it
if(nodes[nN[j+1],]$ntype=="source"){                                             # if this node nN[j+1] is a source...
arrows$loading[i]=nodes[arrows$us_node[i],]$loading_output/arrows$siblings[i]  # then divide the loads in the arrows leaving the source by the number of arrows leaving it
}
if(any(arrows$ds_node==(nN[j+1]))==TRUE){       #CALCULATES THE LOADING LEAVING THIS NODE                               # if there are any arrows coming into this downstream node (nN[j+1])...
nodes[nN[j+1],]$loading_output=10^(log10(sum(arrows$loading[which(arrows$ds_node==(nN[j+1]))]))-nodes[nN[j+1],]$fit)  # then get the sum of all arrows going into that downstream node (nN[j+1]), minus the LRV for that node, to give the output from that downstream node
}
if(arrows[i+1,]$iamsolid==TRUE & arrows$siblings_liquid[i+1]>0){    #CALCULATES THE LOADING IN THIS ARROW     # if this arrow is a solid but has liquid siblings
arrows[i+1,]$loading=nodes[arrows[i+1,]$us_node,]$loading_output*lambda/arrows$siblings_solid[i+1]          # then use the factor lambda to divide the loading up between liquid vs. solid
}else{
if(arrows$iamsolid[i+1]==FALSE & arrows$siblings_solid[i+1]>0){   #CALCULATES THE LOADING IN THIS ARROW     # if this arrow is a liquid but has solid siblings
arrows$loading[i+1]=nodes[arrows$us_node[i+1],]$loading_output*(1-lambda)/arrows$siblings_liquid[i+1]     # then use the factor lambda to divide the loading up between liquid vs. solid
}else{arrows$loading[i+1]=nodes[arrows$us_node[i+1],]$loading_output/arrows$siblings[i+1]}                  # otherwise this arrow only has siblings that are the same as it (could be liquid or solid, but they're all the same), so just divide the loading by the number of siblings
}
#arrows$loading[i+1]=nodes$loading_output[arrows$us_node[i+1]]/arrows$divideby[i+1]
if(i==(nrow(arrows)-1)){i=0} else {i=i+1}
if(j==(nrow(nodes)-1)){j=0} else {j=j+1};arrows;nodes[,c("subType","loading_output")];i;nN[j]
}
lrv=round(log10(sum(nodes$loading_output[nodes$ntype=="source"])/sum(nodes$loading_output[nodes$ntype=="end use"])),2)
references<-unique(k2pdata[nodes$subType %in% tolower(unique(k2pdata$technology_description)),]$bib_id)
#######(((((((I SOLVED IT!)))))))
#######(((((((I SOLVED IT!)))))))
#######(((((((I SOLVED IT!)))))))
# store the results
results$Centralized_LRV<-lrv
if(any(nodes$matrix=="liquid")){results$Liquid_Effluent<-nodes[nodes$ntype=="end use" & nodes$matrix=="liquid",]$loading_output}else{results$Liquid_Effluent<-0}
if(any(nodes$matrix=="solid")){results$Sludge_Biosolids<-sum(nodes[nodes$ntype=="end use" & nodes$matrix=="solid",]$loading_output)}else{results$Sludge_Biosolids<-0}
loadings=results
loadings$Percent_Liquid<-round(loadings$Liquid_Effluent/(loadings$Liquid_Effluent+loadings$Sludge_Biosolids)*100,1)
loadings$Percent_Solid<-round(loadings$Sludge_Biosolids/(loadings$Liquid_Effluent+loadings$Sludge_Biosolids)*100,1)
arrows$relativeLoading<-arrows$loading/(results$In_Fecal_Sludge+results$In_Sewage)
arrows$us_node_type<-nodes[arrows$us_node,]$subType
arrows$ds_node_type<-nodes[arrows$ds_node,]$subType
solved<-list(arrows=arrows[,c("us_node","ds_node","loading","flowtype","us_node_type","ds_node_type","relativeLoading")],
nodes=nodes[,c("name","ntype","subType","temperature","retentionTime","depth","useCategory","moistureContent","holdingTime","matrix","loading_output","pathogen")],
loadings=loadings,
references=references)
return(list(lrv=solved$loadings$Centralized_LRV,pSolid=solved$loadings$Percent_Solid,pLiquid=solved$loadings$Percent_Liquid))
}
v<-once(mySketch,pathogenType="Virus",inFecalSludge,inSewage)
b<-once(mySketch,pathogenType="Bacteria",inFecalSludge,inSewage)
p<-once(mySketch,pathogenType="Protozoa",inFecalSludge,inSewage)
h<-once(mySketch,pathogenType="Helminth",inFecalSludge,inSewage)
stackChart<-list(
chart=list(type="column"),
title=list(text="Breakdown of Pathogen Loadings"),
xAxis=list(
categories=c("Virus","Bacteria","Protozoa","Helminth")
),
yAxis=list(
min=0,
max=100,
title=list(text="Pathogen Loadings")
),
series=list(
list(
name="Percent % in Liquid Effluent",
data=c(v$pLiquid,b$pLiquid,p$pLiquid,h$pLiquid)
),
list(
name="Percent % in Sludge/Biosolids",
data=c(v$pSolid,b$pSolid,p$pSolid,h$pSolid)
)
)
)
LRV<-list(
labels=c("Virus","Bacteria","Protozoa","Helminth"),
values=c(v$lrv,b$lrv,p$lrv,h$lrv)
)
output<-jsonlite::toJSON(list(stackChart=stackChart,table=LRV),pretty = T)
output
c(v$lrv,b$lrv,p$lrv,h$lrv)
list(
list(
name="Percent % in Liquid Effluent",
data=c(v$pLiquid,b$pLiquid,p$pLiquid,h$pLiquid)
),
list(
name="Percent % in Sludge/Biosolids",
data=c(v$pSolid,b$pSolid,p$pSolid,h$pSolid)
)
list(
list(
name="Percent % in Liquid Effluent",
data=c(v$pLiquid,b$pLiquid,p$pLiquid,h$pLiquid)
),
list(
name="Percent % in Sludge/Biosolids",
data=c(v$pSolid,b$pSolid,p$pSolid,h$pSolid)
)
)
output
rm(list=ls())
require(ggplot2);require(gridExtra)
library("PerformanceAnalytics")
library("Hmisc")
library("bbmle")
#setwd("Google Drive/2 - Research/_Publications/28 - Musaazi et al. Lit Review/")
persist<-read.csv("k2p_persistence.csv",header=T)
head(persist)
names(persist)
persist$ln_removal<--persist$log10_reduction*log(10)
persist<-persist[persist$matrix=="Fecal sludge",]
nrow(persist)
length(unique(persist$experiment_id))
length(persist[persist$location_comment=="Laboratory-based study",]$experiment_id)
length(unique(persist[persist$location_comment=="Laboratory-based study",]$experiment_id))
length(persist[persist$location_comment!="Laboratory-based study",]$experiment_id)
length(unique(persist[persist$location_comment!="Laboratory-based study",]$experiment_id))
length(unique(persist[persist$microbial_group=="Virus",]$experiment_id))
length(unique(persist[persist$microbial_group=="Bacteria",]$experiment_id))
length(unique(persist[persist$microbial_group=="Protozoa",]$experiment_id))
length(unique(persist[persist$microbial_group=="Helminth",]$experiment_id))
length(unique(persist[persist$location_comment=="Laboratory-based study",]$experiment_id))
length(unique(persist[persist$location_comment!="Laboratory-based study",]$experiment_id))
unique(persist[persist$microbial_group=="Virus",]$microorganism_common_name)
unique(persist[persist$microbial_group=="Bacteria",]$microorganism_common_name)
unique(persist[persist$microbial_group=="Protozoa",]$microorganism_common_name)
unique(persist[persist$microbial_group=="Helminth",]$microorganism_common_name)
#persistence model in pits
head(persist)
#mice(persist[,c(1:7,13:18,20:26)])
#list(as.factor(persist$additive))
persist$additive <- as.character(persist$additive)
#persist$additive <- replace(persist$additive,persist$additive=="None","a_None")
persist$additive <- as.factor(persist$additive)
persist$urine <- as.character(persist$urine)
N<-length(unique(persist$experiment_id))
persist$ind<-NA       # this will be an index variable to distinguish each independent experiment
a1<-ggplot(persist,aes(y=-log10_reduction,x=time_days,color=microbial_group)) +
geom_point() +
coord_cartesian(xlim = c(0, 500),ylim = c(-8,0))
a2<-ggplot(persist,aes(y=-log10_reduction,x=time_days,color=pH,shape=microbial_group)) +
geom_point() + coord_cartesian(xlim = c(1, 500),ylim = c(-8,0)) +
theme_bw()
for(i in 1:length(persist$experiment_id)){
persist$ind[i]<-which(data.frame(unique(persist$experiment_id))==persist$experiment_id[i])
}
k<-rep(NA,N)
k1<-rep(NA,N)
k2<-rep(NA,N)
group<-rep(NA,N)
addit<-rep(NA,N)
urine<-rep(NA,N)
urea<-rep(NA,N)
moist<-rep(NA,N)
temp<-rep(NA,N)
pH<-rep(NA,N)
r2<-rep(NA,N)
t99<-rep(NA,N)
t99jm<-rep(NA,N)
authors<-rep(NA,N)
num<-rep(NA,N)
aicLL<-rep(NA,N)
aicJM<-rep(NA,N)
experiment<-rep(NA,N)
maxLRV<-rep(NA,N)
maxTime<-rep(NA,N)
mcn<-rep(NA,N)
best<-rep(NA,N)
par(mfrow=c(3,6))
for(i in 1:N){   #in this loop, we calculate the k value for the log linear decay:                 Ct = Co*exp(-k*t)
time<-persist[persist$ind==i,]$time_days   #get the time only for the present experiment
lnrv<-persist[persist$ind==i,]$ln_removal #get the ln reduction only for the present experiment
log10_reduction<-persist[persist$ind==i,]$log10_reduction
#plot(time,log10_reduction)
#since we calculated the ln reduction, then equation gets algebraically rearranged like this:    ln(Ct/Co) = -k*t
# lnrv is ln(Ct/Co), so our linear model is like this: lnrv~time
fit<-lm(lnrv~time)
#plot(fit)
summary(fit)
fit2 <- lm(log10_reduction~time)
summary(fit2)
JM2<-function(k1,k2,sigma){
R = lnrv - log(1/(1+exp(k1+k2*log(time))))
R = suppressWarnings(dnorm(R,0,sigma,log=T))
-sum(R)
}
#  if(fit$coefficients[2]<=-10){k1guess=-5;k2guess=20;siguess=3}else{
#    if(fit$coefficients[2]>=-0.0001){k1guess=-5;k2guess=0.01;siguess=2}else{
#      k1guess=0;k2guess=2;siguess=3
#    }
#  }
#  k1guess=4.3*log(-fit$coefficients[2])-24.9
#  k2guess=1.1*log(-fit$coefficients[2])-1.9
#  siguess=2.5
if(fit$coefficients[2]<=-10){k1guess=-fit$coefficients[2];k2guess=-fit$coefficients[2];siguess=3}else{
if(fit$coefficients[2]>=-0.0001){k1guess=-5;k2guess=0.01;siguess=2}else{
if(i==48|i==181|i==186){k1guess=-0.1;k2guess=1;siguess=1}else{
if(i==115){k1guess=4;k2guess=100;siguess=1}else{
if(i==112|i==113|i==105|i==114){k1guess=5;k2guess=1;siguess=1}else{
if(i==180){k1guess=1;k2guess=10;siguess=1}else{
k1guess=-5;k2guess=1;siguess=3
}
}
}
}
}
}
if(length(time)>3){
#  if(i==8|i==63|i==64|i==65|i==66|i==71|i==72|i==73|i==103|i==104|i==105|i==113|i==114|i==129|i==130|i==147|i==148|i==149|i==161|i==162|i==164|i==174|i==175|i==176|i==200|i==233|i==234|i==242){
fit.jm<-mle2(minuslogl=JM2,start=list(k1=k1guess,k2=k2guess,sigma=siguess),optimizer="nlminb") # unbounded optimization using portable Fortran programs for numerical computation (PORT) routines
#Fox PA, Hall AP, Schryer NL (1978). “The PORT Mathematical Subroutine Library.” ACM
#Transactions on Mathematical Software, 4(2), 104–126. ISSN 00983500. doi:10.1145/
#355780.355783. URL http://portal.acm.org/citation.cfm?doid=355780.355783.
#    fit.jm<-NA}else{fit.jm<-mle2(minuslogl=JM2,start=list(k1=k1guess,k2=k2guess,sigma=siguess))
#    }
}else{fit.jm<-NA}
########
#i=115;experiment[i];one=4;two=100
#time<-persist[persist$ind==i,]$time_days   #get the time only for the present experiment
#lnrv<-persist[persist$ind==i,]$ln_removal #get the ln reduction only for the present experiment
#log10_reduction<-persist[persist$ind==i,]$log10_reduction
#fit.jm<-mle2(minuslogl=JM2,start=list(k1=one,k2=two,sigma=1),optimizer="nlminb") # i==1|i==2|i==3|i==4
#plot(time,-log10_reduction,ylim=c(-8,0),xlim=c(0,100),ylab="Log10 Reduction",xlab="Time (days)",main=paste(experiment[i],", ",group[i],"\n",addit[i],", ",urea[i],", ",round(r2[i],2),sep=""),sub=authors[i])
#lines(seq(0,360),-fit2$coefficients[2]*seq(0,360)-fit2$coefficients[1],col="blue")
#lines(seq(0,360),log10(1/(1+exp(one+two*log(seq(0,360))))),lty=2,col="green")
#lines(seq(0,360),log10(1/(1+exp(coef(fit.jm)["k1"]+coef(fit.jm)["k2"]*log(seq(0,360))))),lty=2,col="red")
########
group[i]<-as.character(unique(persist[persist$ind==i,]$microbial_group))
addit[i]<-as.character(unique(persist[persist$ind==i,]$additive))
urine[i]<-as.character(unique(persist[persist$ind==i,]$urine))
moist[i]<-as.numeric(median(persist[persist$ind==i,]$moisture_content_percent))
temp[i]<-as.numeric(median(persist[persist$ind==i,]$temperature_celsius))
maxTime[i]<-max(time)
pH[i]<-as.numeric(median(persist[persist$ind==i,]$pH))
urea[i]<-as.character(unique(persist[persist$ind==i,]$urea))
authors[i]<-as.character(unique(persist[persist$ind==i,]$authors))
experiment[i]<-as.numeric(unique(persist[persist$ind==i,]$experiment_id))
maxLRV[i]<-as.numeric(max(persist[persist$ind==i,]$log10_reduction))
mcn[i]<-as.character(persist[persist$ind==i,]$microorganism_common_name)
r2[i]<-summary(fit)$r.squared
num[i]<-length(time)
k[i]<-fit$coefficients[2]
if(!is.na(fit.jm)){k1[i]<-coef(fit.jm)["k1"]}
if(!is.na(fit.jm)){k2[i]<-coef(fit.jm)["k2"]}
aicLL[i]<-AIC(fit)
if(length(time)>3){aicJM[i]<-AIC(fit.jm)}else{aicJM[i]<-NA}
if(is.na(aicJM[i])){best[i]<-"Chick Model"}else{if(aicLL[i]<aicJM[i]){best[i]<-"Chick Model"}else{best[i]<-"JM2 Model"}}
par(mar=c(5,4,3.5,1))
plot(time,-log10_reduction,ylim=c(-8,0),xlim=c(0,500),ylab="Log10 Reduction",xlab="Time (days)",main=paste(experiment[i],", ",group[i],", N=",num[i],", LRVmax=",round(maxLRV[i],2),"\n",addit[i],", ",urea[i],", ",round(r2[i],2),"\n",authors[i],sep=""),sub=best[i],cex.main=0.95)
lines(seq(0,360),-fit2$coefficients[2]*seq(0,360)-fit2$coefficients[1],col="blue")
if(length(time)>3){lines(seq(0,360),log10(1/(1+exp(coef(fit.jm)["k1"]+coef(fit.jm)["k2"]*log(seq(0,360))))),lty=2,col="red")}
#if(r2[i]>0.5&maxLRV[i]>=1&num[i]>3){
#  if(par('page')==TRUE){
#    #png(paste("plot",i,".png",sep=""))
#    par(mfrow=c(3,3))
#    }
#  plot(time,-log10_reduction,ylim=c(-8,0),xlim=c(0,100),ylab="Log10 Reduction",xlab="Time (days)",main=paste(experiment[i],", ",group[i],"\n",addit[i],", ",urea[i],", ",round(r2[i],2),sep=""),sub=authors[i])
#  lines(seq(0,120),-fit2$coefficients[2]*seq(0,120)-fit2$coefficients[1])
#  if(!is.na(fit.jm)){lines(seq(0,120),log10(1/(1+exp(coef(fit.jm)["k1"]+coef(fit.jm)["k2"]*log(seq(0,120))))))}
#  #if(par('page')==TRUE){dev.off()}
#}
#text(75,-3.5,paste("Source:",authors[i]),cex=0.5)
t99[i]<-(2-fit2$coefficients[1])/fit2$coefficients[2]
t99jm[i]<-exp((log(99)-k1[i])/k2[i])
}
i
rm(list=ls())
require(ggplot2);require(gridExtra)
library("PerformanceAnalytics")
library("Hmisc")
library("bbmle")
#setwd("Google Drive/2 - Research/_Publications/28 - Musaazi et al. Lit Review/")
persist<-read.csv("k2p_persistence.csv",header=T)
head(persist)
names(persist)
persist$ln_removal<--persist$log10_reduction*log(10)
persist<-persist[persist$matrix=="Fecal sludge",]
nrow(persist)
length(unique(persist$experiment_id))
length(persist[persist$location_comment=="Laboratory-based study",]$experiment_id)
length(unique(persist[persist$location_comment=="Laboratory-based study",]$experiment_id))
length(persist[persist$location_comment!="Laboratory-based study",]$experiment_id)
length(unique(persist[persist$location_comment!="Laboratory-based study",]$experiment_id))
length(unique(persist[persist$microbial_group=="Virus",]$experiment_id))
length(unique(persist[persist$microbial_group=="Bacteria",]$experiment_id))
length(unique(persist[persist$microbial_group=="Protozoa",]$experiment_id))
length(unique(persist[persist$microbial_group=="Helminth",]$experiment_id))
length(unique(persist[persist$location_comment=="Laboratory-based study",]$experiment_id))
length(unique(persist[persist$location_comment!="Laboratory-based study",]$experiment_id))
unique(persist[persist$microbial_group=="Virus",]$microorganism_common_name)
unique(persist[persist$microbial_group=="Bacteria",]$microorganism_common_name)
unique(persist[persist$microbial_group=="Protozoa",]$microorganism_common_name)
unique(persist[persist$microbial_group=="Helminth",]$microorganism_common_name)
#persistence model in pits
head(persist)
#mice(persist[,c(1:7,13:18,20:26)])
#list(as.factor(persist$additive))
persist$additive <- as.character(persist$additive)
#persist$additive <- replace(persist$additive,persist$additive=="None","a_None")
persist$additive <- as.factor(persist$additive)
persist$urine <- as.character(persist$urine)
N<-length(unique(persist$experiment_id))
persist$ind<-NA       # this will be an index variable to distinguish each independent experiment
a1<-ggplot(persist,aes(y=-log10_reduction,x=time_days,color=microbial_group)) +
geom_point() +
coord_cartesian(xlim = c(0, 500),ylim = c(-8,0))
a2<-ggplot(persist,aes(y=-log10_reduction,x=time_days,color=pH,shape=microbial_group)) +
geom_point() + coord_cartesian(xlim = c(1, 500),ylim = c(-8,0)) +
theme_bw()
for(i in 1:length(persist$experiment_id)){
persist$ind[i]<-which(data.frame(unique(persist$experiment_id))==persist$experiment_id[i])
}
k<-rep(NA,N)
k1<-rep(NA,N)
k2<-rep(NA,N)
group<-rep(NA,N)
addit<-rep(NA,N)
urine<-rep(NA,N)
urea<-rep(NA,N)
moist<-rep(NA,N)
temp<-rep(NA,N)
pH<-rep(NA,N)
r2<-rep(NA,N)
t99<-rep(NA,N)
t99jm<-rep(NA,N)
authors<-rep(NA,N)
num<-rep(NA,N)
aicLL<-rep(NA,N)
aicJM<-rep(NA,N)
experiment<-rep(NA,N)
maxLRV<-rep(NA,N)
maxTime<-rep(NA,N)
mcn<-rep(NA,N)
best<-rep(NA,N)
par(mfrow=c(3,6))
for(i in 1:N){   #in this loop, we calculate the k value for the log linear decay:                 Ct = Co*exp(-k*t)
time<-persist[persist$ind==i,]$time_days   #get the time only for the present experiment
lnrv<-persist[persist$ind==i,]$ln_removal #get the ln reduction only for the present experiment
log10_reduction<-persist[persist$ind==i,]$log10_reduction
#plot(time,log10_reduction)
#since we calculated the ln reduction, then equation gets algebraically rearranged like this:    ln(Ct/Co) = -k*t
# lnrv is ln(Ct/Co), so our linear model is like this: lnrv~time
fit<-lm(lnrv~time)
#plot(fit)
summary(fit)
fit2 <- lm(log10_reduction~time)
summary(fit2)
JM2<-function(k1,k2,sigma){
R = lnrv - log(1/(1+exp(k1+k2*log(time))))
R = suppressWarnings(dnorm(R,0,sigma,log=T))
-sum(R)
}
#  if(fit$coefficients[2]<=-10){k1guess=-5;k2guess=20;siguess=3}else{
#    if(fit$coefficients[2]>=-0.0001){k1guess=-5;k2guess=0.01;siguess=2}else{
#      k1guess=0;k2guess=2;siguess=3
#    }
#  }
#  k1guess=4.3*log(-fit$coefficients[2])-24.9
#  k2guess=1.1*log(-fit$coefficients[2])-1.9
#  siguess=2.5
if(fit$coefficients[2]<=-10){k1guess=-fit$coefficients[2];k2guess=-fit$coefficients[2];siguess=3}else{
if(fit$coefficients[2]>=-0.0001){k1guess=-5;k2guess=0.01;siguess=2}else{
if(i==48|i==181|i==186){k1guess=-0.1;k2guess=1;siguess=1}else{
if(i==115){k1guess=4;k2guess=100;siguess=1}else{
if(i==112|i==113|i==105|i==114){k1guess=5;k2guess=1;siguess=1}else{
if(i==180){k1guess=1;k2guess=10;siguess=1}else{
k1guess=-5;k2guess=1;siguess=3
}
}
}
}
}
}
if(length(time)>3){
#  if(i==8|i==63|i==64|i==65|i==66|i==71|i==72|i==73|i==103|i==104|i==105|i==113|i==114|i==129|i==130|i==147|i==148|i==149|i==161|i==162|i==164|i==174|i==175|i==176|i==200|i==233|i==234|i==242){
fit.jm<-mle2(minuslogl=JM2,start=list(k1=k1guess,k2=k2guess,sigma=siguess),optimizer="nlminb") # unbounded optimization using portable Fortran programs for numerical computation (PORT) routines
#Fox PA, Hall AP, Schryer NL (1978). “The PORT Mathematical Subroutine Library.” ACM
#Transactions on Mathematical Software, 4(2), 104–126. ISSN 00983500. doi:10.1145/
#355780.355783. URL http://portal.acm.org/citation.cfm?doid=355780.355783.
#    fit.jm<-NA}else{fit.jm<-mle2(minuslogl=JM2,start=list(k1=k1guess,k2=k2guess,sigma=siguess))
#    }
}else{fit.jm<-NA}
########
#i=115;experiment[i];one=4;two=100
#time<-persist[persist$ind==i,]$time_days   #get the time only for the present experiment
#lnrv<-persist[persist$ind==i,]$ln_removal #get the ln reduction only for the present experiment
#log10_reduction<-persist[persist$ind==i,]$log10_reduction
#fit.jm<-mle2(minuslogl=JM2,start=list(k1=one,k2=two,sigma=1),optimizer="nlminb") # i==1|i==2|i==3|i==4
#plot(time,-log10_reduction,ylim=c(-8,0),xlim=c(0,100),ylab="Log10 Reduction",xlab="Time (days)",main=paste(experiment[i],", ",group[i],"\n",addit[i],", ",urea[i],", ",round(r2[i],2),sep=""),sub=authors[i])
#lines(seq(0,360),-fit2$coefficients[2]*seq(0,360)-fit2$coefficients[1],col="blue")
#lines(seq(0,360),log10(1/(1+exp(one+two*log(seq(0,360))))),lty=2,col="green")
#lines(seq(0,360),log10(1/(1+exp(coef(fit.jm)["k1"]+coef(fit.jm)["k2"]*log(seq(0,360))))),lty=2,col="red")
########
group[i]<-as.character(unique(persist[persist$ind==i,]$microbial_group))
addit[i]<-as.character(unique(persist[persist$ind==i,]$additive))
urine[i]<-as.character(unique(persist[persist$ind==i,]$urine))
moist[i]<-as.numeric(median(persist[persist$ind==i,]$moisture_content_percent))
temp[i]<-as.numeric(median(persist[persist$ind==i,]$temperature_celsius))
maxTime[i]<-max(time)
pH[i]<-as.numeric(median(persist[persist$ind==i,]$pH))
urea[i]<-as.character(unique(persist[persist$ind==i,]$urea))
authors[i]<-as.character(unique(persist[persist$ind==i,]$authors))
experiment[i]<-as.numeric(unique(persist[persist$ind==i,]$experiment_id))
maxLRV[i]<-as.numeric(max(persist[persist$ind==i,]$log10_reduction))
mcn[i]<-as.character(persist[persist$ind==i,]$microorganism_common_name)
r2[i]<-summary(fit)$r.squared
num[i]<-length(time)
k[i]<-fit$coefficients[2]
if(!is.na(fit.jm)){k1[i]<-coef(fit.jm)["k1"]}
if(!is.na(fit.jm)){k2[i]<-coef(fit.jm)["k2"]}
aicLL[i]<-AIC(fit)
if(length(time)>3){aicJM[i]<-AIC(fit.jm)}else{aicJM[i]<-NA}
if(is.na(aicJM[i])){best[i]<-"Chick Model"}else{if(aicLL[i]<aicJM[i]){best[i]<-"Chick Model"}else{best[i]<-"JM2 Model"}}
par(mar=c(5,4,3.5,1))
plot(time,-log10_reduction,ylim=c(-8,0),xlim=c(0,500),ylab="Log10 Reduction",xlab="Time (days)",main=paste(experiment[i],", ",group[i],", N=",num[i],", LRVmax=",round(maxLRV[i],2),"\n",addit[i],", ",urea[i],", ",round(r2[i],2),"\n",authors[i],sep=""),sub=best[i],cex.main=0.95)
lines(seq(0,360),-fit2$coefficients[2]*seq(0,360)-fit2$coefficients[1],col="blue")
if(length(time)>3){lines(seq(0,360),log10(1/(1+exp(coef(fit.jm)["k1"]+coef(fit.jm)["k2"]*log(seq(0,360))))),lty=2,col="red")}
#if(r2[i]>0.5&maxLRV[i]>=1&num[i]>3){
#  if(par('page')==TRUE){
#    #png(paste("plot",i,".png",sep=""))
#    par(mfrow=c(3,3))
#    }
#  plot(time,-log10_reduction,ylim=c(-8,0),xlim=c(0,100),ylab="Log10 Reduction",xlab="Time (days)",main=paste(experiment[i],", ",group[i],"\n",addit[i],", ",urea[i],", ",round(r2[i],2),sep=""),sub=authors[i])
#  lines(seq(0,120),-fit2$coefficients[2]*seq(0,120)-fit2$coefficients[1])
#  if(!is.na(fit.jm)){lines(seq(0,120),log10(1/(1+exp(coef(fit.jm)["k1"]+coef(fit.jm)["k2"]*log(seq(0,120))))))}
#  #if(par('page')==TRUE){dev.off()}
#}
#text(75,-3.5,paste("Source:",authors[i]),cex=0.5)
t99[i]<-(2-fit2$coefficients[1])/fit2$coefficients[2]
t99jm[i]<-exp((log(99)-k1[i])/k2[i])
}
i
rm(list=ls())
require(ggplot2);require(gridExtra)
library("PerformanceAnalytics")
library("Hmisc")
library("bbmle")
#setwd("Google Drive/2 - Research/_Publications/28 - Musaazi et al. Lit Review/")
persist<-read.csv("k2p_persistence.csv",header=T)
head(persist)
names(persist)
persist$ln_removal<--persist$log10_reduction*log(10)
getwd()
