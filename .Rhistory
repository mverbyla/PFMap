available<-rowSums(as.data.frame(data[,fromColumns]));available
spliceFr<-data[,fromColumns]/available
alreadyThere<-rowSums(as.data.frame(data[,toColumns]));alreadyThere
spliceTo<-data[,toColumns]/alreadyThere
if(moved=="all"){
data[,toColumns]<-data[,toColumns]+available*spliceTo
data[,fromColumns]<-0
dataOut<-data
}else{
dataAside<-data.frame()
goal<-current+moved
while(current<goal){
available<-rowSums(as.data.frame(data[,fromColumns]))
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
alreadyThere[which(available==0)]<-999
ofNeed<-which.min(alreadyThere)
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
spliceFr<-data[,fromColumns]/available
spliceTo<-data[,toColumns]/alreadyThere
if(length(fromColumns)>1){sF<-spliceFr[ofNeed,]}else{sF<-spliceFr[ofNeed]}
if(length(toColumns)>1){sT<-spliceTo[ofNeed,]}else{sT<-spliceTo[ofNeed]}
wouldBeNegative<-any( data[ofNeed,fromColumns]-precision*sF < 0 )
if(wouldBeNegative==F | is.na(wouldBeNegative)){ #checks to see if the values in the fromColumns would become negative and if so, then it dumps all remaining percentages into the toColumn
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+precision*sT
data[ofNeed,fromColumns]<-data[ofNeed,fromColumns]-precision*sF
}else{
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+sum(data[ofNeed,fromColumns])*sT
data[ofNeed,fromColumns]<-0
}
current<-sum(data$population*mf*data[,toColumns])/sum(data$population*mf);data;current;goal
}
}
return(data)
}
slide<-function(data,precision,moved,fromColumns,toColumns){
mf<-if(context=="urban"){data$fraction_urban_pop}
mf<-if(context=="rural"){1-data$fraction_urban_pop}
current<-sum(data$population*mf*data[,toColumns])/sum(data$population*mf);current
available<-rowSums(as.data.frame(data[,fromColumns]));available
spliceFr<-data[,fromColumns]/available
alreadyThere<-rowSums(as.data.frame(data[,toColumns]));alreadyThere
spliceTo<-data[,toColumns]/alreadyThere
if(moved=="all"){
data[,toColumns]<-data[,toColumns]+available*spliceTo
data[,fromColumns]<-0
dataOut<-data
}else{
dataAside<-data.frame()
goal<-current+moved
while(current<goal){
available<-rowSums(as.data.frame(data[,fromColumns]))
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
alreadyThere[which(available==0)]<-999
ofNeed<-which.min(alreadyThere)
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
spliceFr<-data[,fromColumns]/available
spliceTo<-data[,toColumns]/alreadyThere
if(length(fromColumns)>1){sF<-spliceFr[ofNeed,]}else{sF<-spliceFr[ofNeed]}
if(length(toColumns)>1){sT<-spliceTo[ofNeed,]}else{sT<-spliceTo[ofNeed]}
wouldBeNegative<-any( data[ofNeed,fromColumns]-precision*sF < 0 )
if(wouldBeNegative==F | is.na(wouldBeNegative)){ #checks to see if the values in the fromColumns would become negative and if so, then it dumps all remaining percentages into the toColumn
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+precision*sT
data[ofNeed,fromColumns]<-data[ofNeed,fromColumns]-precision*sF
}else{
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+sum(data[ofNeed,fromColumns])*sT
data[ofNeed,fromColumns]<-0
}
current<-sum(data$population*mf*data[,toColumns])/sum(data$population*mf);data;current;goal
}
}
return(data)
}
res1<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved="all",fromColumns=c("flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSeptic_urb","flushPit_urb"),context="urban")
slide<-function(data,precision,moved,fromColumns,toColumns,context){
mf<-if(context=="urban"){data$fraction_urban_pop}
mf<-if(context=="rural"){1-data$fraction_urban_pop}
current<-sum(data$population*mf*data[,toColumns])/sum(data$population*mf);current
available<-rowSums(as.data.frame(data[,fromColumns]));available
spliceFr<-data[,fromColumns]/available
alreadyThere<-rowSums(as.data.frame(data[,toColumns]));alreadyThere
spliceTo<-data[,toColumns]/alreadyThere
if(moved=="all"){
data[,toColumns]<-data[,toColumns]+available*spliceTo
data[,fromColumns]<-0
dataOut<-data
}else{
dataAside<-data.frame()
goal<-current+moved
while(current<goal){
available<-rowSums(as.data.frame(data[,fromColumns]))
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
alreadyThere[which(available==0)]<-999
ofNeed<-which.min(alreadyThere)
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
spliceFr<-data[,fromColumns]/available
spliceTo<-data[,toColumns]/alreadyThere
if(length(fromColumns)>1){sF<-spliceFr[ofNeed,]}else{sF<-spliceFr[ofNeed]}
if(length(toColumns)>1){sT<-spliceTo[ofNeed,]}else{sT<-spliceTo[ofNeed]}
wouldBeNegative<-any( data[ofNeed,fromColumns]-precision*sF < 0 )
if(wouldBeNegative==F | is.na(wouldBeNegative)){ #checks to see if the values in the fromColumns would become negative and if so, then it dumps all remaining percentages into the toColumn
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+precision*sT
data[ofNeed,fromColumns]<-data[ofNeed,fromColumns]-precision*sF
}else{
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+sum(data[ofNeed,fromColumns])*sT
data[ofNeed,fromColumns]<-0
}
current<-sum(data$population*mf*data[,toColumns])/sum(data$population*mf);data;current;goal
}
}
return(data)
}
res1<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved="all",fromColumns=c("flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSeptic_urb","flushPit_urb"),context="urban")
data=read.csv("data/InputFile.csv")
precision=0.001
moved="all"
fromColumns=c("flushOpen_urb","flushUnknown_urb")
toColumns=c("flushSeptic_urb","flushPit_urb")
context="urban"
mf<-if(context=="urban"){data$fraction_urban_pop}
mf<-if(context=="rural"){1-data$fraction_urban_pop}
current<-sum(data$population*mf*data[,toColumns])/sum(data$population*mf);current
data$population
mf
mf<-data.frame(urban=data$fraction_urban_pop,rural=1-data$fraction_urban_pop)
mf
data$fraction_urban_pop
context
mf[context,]
mf[,context]
slide<-function(data,precision,moved,fromColumns,toColumns,context){
slide<-function(data,precision,moved,fromColumns,toColumns,context){
#' res1<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved="all",fromColumns=c("flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSeptic_urb","flushPit_urb"),context="urban")
#' res2<-slide(data=res1,precision=0.001,moved="all",fromColumns=c("flushOpen_rur","flushUnknown_rur"),toColumns=c("flushSeptic_rur","flushPit_rur"),context="rural")
#' #rowSums(res2[,c(13:25)])
#' #rowSums(res2[,c(36:48)])
#'
#' # This is an example of sliding the green button to the left by 10% in both urban and rural settings
#' res3<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved=0.1,fromColumns=c("flushSeptic_urb","flushPit_urb","flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSewer_urb"),context="urban")
#' res4<-slide(data=res3,precision=0.001,moved=0.1,fromColumns=c("flushSeptic_rur","flushPit_rur","flushOpen_rur","flushUnknown_rur"),toColumns=c("flushSewer_rur"),context="rural")
#' #rowSums(res4[,c(13:25)])
#' #rowSums(res4[,c(36:48)])
slide<-function(data,precision,moved,fromColumns,toColumns,context){
#' res1<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved="all",fromColumns=c("flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSeptic_urb","flushPit_urb"),context="urban")
#' res2<-slide(data=res1,precision=0.001,moved="all",fromColumns=c("flushOpen_rur","flushUnknown_rur"),toColumns=c("flushSeptic_rur","flushPit_rur"),context="rural")
#' #rowSums(res2[,c(13:25)])
#' #rowSums(res2[,c(36:48)])
#'
#' # This is an example of sliding the green button to the left by 10% in both urban and rural settings
#' res3<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved=0.1,fromColumns=c("flushSeptic_urb","flushPit_urb","flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSewer_urb"),context="urban")
#' res4<-slide(data=res3,precision=0.001,moved=0.1,fromColumns=c("flushSeptic_rur","flushPit_rur","flushOpen_rur","flushUnknown_rur"),toColumns=c("flushSewer_rur"),context="rural")
#' #rowSums(res4[,c(13:25)])
#' #rowSums(res4[,c(36:48)])
slide<-function(data,precision,moved,fromColumns,toColumns,context){
data
precision
moved
fromColumns
toColumns
context
mf<-data.frame(urban=data$fraction_urban_pop,rural=1-data$fraction_urban_pop)
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);current
available<-rowSums(as.data.frame(data[,fromColumns]));available
spliceFr<-data[,fromColumns]/available
alreadyThere<-rowSums(as.data.frame(data[,toColumns]));alreadyThere
spliceTo<-data[,toColumns]/alreadyThere
if(moved=="all"){
data[,toColumns]<-data[,toColumns]+available*spliceTo
data[,fromColumns]<-0
dataOut<-data
}else{
dataAside<-data.frame()
goal<-current+moved
while(current<goal){
available<-rowSums(as.data.frame(data[,fromColumns]))
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
alreadyThere[which(available==0)]<-999
ofNeed<-which.min(alreadyThere)
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
spliceFr<-data[,fromColumns]/available
spliceTo<-data[,toColumns]/alreadyThere
if(length(fromColumns)>1){sF<-spliceFr[ofNeed,]}else{sF<-spliceFr[ofNeed]}
if(length(toColumns)>1){sT<-spliceTo[ofNeed,]}else{sT<-spliceTo[ofNeed]}
wouldBeNegative<-any( data[ofNeed,fromColumns]-precision*sF < 0 )
if(wouldBeNegative==F | is.na(wouldBeNegative)){ #checks to see if the values in the fromColumns would become negative and if so, then it dumps all remaining percentages into the toColumn
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+precision*sT
data[ofNeed,fromColumns]<-data[ofNeed,fromColumns]-precision*sF
}else{
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+sum(data[ofNeed,fromColumns])*sT
data[ofNeed,fromColumns]<-0
}
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);data;current;goal
}
}
return(data)
data
res1<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved="all",fromColumns=c("flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSeptic_urb","flushPit_urb"),context="urban")
context=c("rural")
context
mf<-data.frame(urban=data$fraction_urban_pop,rural=1-data$fraction_urban_pop)
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);current
#' res1<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved="all",fromColumns=c("flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSeptic_urb","flushPit_urb"),context="urban")
#' res2<-slide(data=res1,precision=0.001,moved="all",fromColumns=c("flushOpen_rur","flushUnknown_rur"),toColumns=c("flushSeptic_rur","flushPit_rur"),context="rural")
#' #rowSums(res2[,c(13:25)])
#' #rowSums(res2[,c(36:48)])
#'
#' # This is an example of sliding the green button to the left by 10% in both urban and rural settings
#' res3<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved=0.1,fromColumns=c("flushSeptic_urb","flushPit_urb","flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSewer_urb"),context="urban")
#' res4<-slide(data=res3,precision=0.001,moved=0.1,fromColumns=c("flushSeptic_rur","flushPit_rur","flushOpen_rur","flushUnknown_rur"),toColumns=c("flushSewer_rur"),context="rural")
#' #rowSums(res4[,c(13:25)])
#' #rowSums(res4[,c(36:48)])
slide<-function(data,precision,moved,fromColumns,toColumns,context){
#' res1<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved="all",fromColumns=c("flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSeptic_urb","flushPit_urb"),context="urban")
#' res2<-slide(data=res1,precision=0.001,moved="all",fromColumns=c("flushOpen_rur","flushUnknown_rur"),toColumns=c("flushSeptic_rur","flushPit_rur"),context="rural")
#' #rowSums(res2[,c(13:25)])
#' #rowSums(res2[,c(36:48)])
#'
#' # This is an example of sliding the green button to the left by 10% in both urban and rural settings
#' res3<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved=0.1,fromColumns=c("flushSeptic_urb","flushPit_urb","flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSewer_urb"),context="urban")
#' res4<-slide(data=res3,precision=0.001,moved=0.1,fromColumns=c("flushSeptic_rur","flushPit_rur","flushOpen_rur","flushUnknown_rur"),toColumns=c("flushSewer_rur"),context="rural")
#' #rowSums(res4[,c(13:25)])
#' #rowSums(res4[,c(36:48)])
slide<-function(data,precision,moved,fromColumns,toColumns,context){
#' res1<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved="all",fromColumns=c("flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSeptic_urb","flushPit_urb"),context="urban")
#' res2<-slide(data=res1,precision=0.001,moved="all",fromColumns=c("flushOpen_rur","flushUnknown_rur"),toColumns=c("flushSeptic_rur","flushPit_rur"),context="rural")
#' #rowSums(res2[,c(13:25)])
#' #rowSums(res2[,c(36:48)])
#'
#' # This is an example of sliding the green button to the left by 10% in both urban and rural settings
#' res3<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved=0.1,fromColumns=c("flushSeptic_urb","flushPit_urb","flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSewer_urb"),context="urban")
#' res4<-slide(data=res3,precision=0.001,moved=0.1,fromColumns=c("flushSeptic_rur","flushPit_rur","flushOpen_rur","flushUnknown_rur"),toColumns=c("flushSewer_rur"),context="rural")
#' #rowSums(res4[,c(13:25)])
#' #rowSums(res4[,c(36:48)])
slide<-function(data,precision,moved,fromColumns,toColumns,context){
slide<-function(data,precision,moved,fromColumns,toColumns,context){
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);current
slide<-function(data,precision,moved,fromColumns,toColumns,context){
mf<-data.frame(urban=data$fraction_urban_pop,rural=1-data$fraction_urban_pop)
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);current
available<-rowSums(as.data.frame(data[,fromColumns]));available
spliceFr<-data[,fromColumns]/available
alreadyThere<-rowSums(as.data.frame(data[,toColumns]));alreadyThere
spliceTo<-data[,toColumns]/alreadyThere
if(moved=="all"){
data[,toColumns]<-data[,toColumns]+available*spliceTo
data[,fromColumns]<-0
dataOut<-data
}else{
dataAside<-data.frame()
goal<-current+moved
while(current<goal){
available<-rowSums(as.data.frame(data[,fromColumns]))
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
alreadyThere[which(available==0)]<-999
ofNeed<-which.min(alreadyThere)
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
spliceFr<-data[,fromColumns]/available
spliceTo<-data[,toColumns]/alreadyThere
if(length(fromColumns)>1){sF<-spliceFr[ofNeed,]}else{sF<-spliceFr[ofNeed]}
if(length(toColumns)>1){sT<-spliceTo[ofNeed,]}else{sT<-spliceTo[ofNeed]}
wouldBeNegative<-any( data[ofNeed,fromColumns]-precision*sF < 0 )
if(wouldBeNegative==F | is.na(wouldBeNegative)){ #checks to see if the values in the fromColumns would become negative and if so, then it dumps all remaining percentages into the toColumn
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+precision*sT
data[ofNeed,fromColumns]<-data[ofNeed,fromColumns]-precision*sF
}else{
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+sum(data[ofNeed,fromColumns])*sT
data[ofNeed,fromColumns]<-0
}
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);data;current;goal
}
}
return(data)
}
View(slide)
function(data,precision,moved,fromColumns,toColumns,context){
mf<-data.frame(urban=data$fraction_urban_pop,rural=1-data$fraction_urban_pop)
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);current
available<-rowSums(as.data.frame(data[,fromColumns]));available
spliceFr<-data[,fromColumns]/available
alreadyThere<-rowSums(as.data.frame(data[,toColumns]));alreadyThere
spliceTo<-data[,toColumns]/alreadyThere
if(moved=="all"){
data[,toColumns]<-data[,toColumns]+available*spliceTo
data[,fromColumns]<-0
dataOut<-data
}else{
dataAside<-data.frame()
goal<-current+moved
while(current<goal){
available<-rowSums(as.data.frame(data[,fromColumns]))
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
alreadyThere[which(available==0)]<-999
ofNeed<-which.min(alreadyThere)
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
spliceFr<-data[,fromColumns]/available
spliceTo<-data[,toColumns]/alreadyThere
if(length(fromColumns)>1){sF<-spliceFr[ofNeed,]}else{sF<-spliceFr[ofNeed]}
if(length(toColumns)>1){sT<-spliceTo[ofNeed,]}else{sT<-spliceTo[ofNeed]}
wouldBeNegative<-any( data[ofNeed,fromColumns]-precision*sF < 0 )
if(wouldBeNegative==F | is.na(wouldBeNegative)){ #checks to see if the values in the fromColumns would become negative and if so, then it dumps all remaining percentages into the toColumn
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+precision*sT
data[ofNeed,fromColumns]<-data[ofNeed,fromColumns]-precision*sF
}else{
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+sum(data[ofNeed,fromColumns])*sT
data[ofNeed,fromColumns]<-0
}
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);data;current;goal
}
}
return(data)
}
slide<-function(data,precision,moved,fromColumns,toColumns,context){
slide<-function(data,precision,moved,fromColumns,toColumns,context){
mf<-data.frame(urban=data$fraction_urban_pop,rural=1-data$fraction_urban_pop)
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);current
available<-rowSums(as.data.frame(data[,fromColumns]));available
spliceFr<-data[,fromColumns]/available
alreadyThere<-rowSums(as.data.frame(data[,toColumns]));alreadyThere
spliceTo<-data[,toColumns]/alreadyThere
if(moved=="all"){
data[,toColumns]<-data[,toColumns]+available*spliceTo
data[,fromColumns]<-0
dataOut<-data
}else{
dataAside<-data.frame()
goal<-current+moved
while(current<goal){
available<-rowSums(as.data.frame(data[,fromColumns]))
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
alreadyThere[which(available==0)]<-999
ofNeed<-which.min(alreadyThere)
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
spliceFr<-data[,fromColumns]/available
spliceTo<-data[,toColumns]/alreadyThere
if(length(fromColumns)>1){sF<-spliceFr[ofNeed,]}else{sF<-spliceFr[ofNeed]}
if(length(toColumns)>1){sT<-spliceTo[ofNeed,]}else{sT<-spliceTo[ofNeed]}
wouldBeNegative<-any( data[ofNeed,fromColumns]-precision*sF < 0 )
if(wouldBeNegative==F | is.na(wouldBeNegative)){ #checks to see if the values in the fromColumns would become negative and if so, then it dumps all remaining percentages into the toColumn
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+precision*sT
data[ofNeed,fromColumns]<-data[ofNeed,fromColumns]-precision*sF
}else{
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+sum(data[ofNeed,fromColumns])*sT
data[ofNeed,fromColumns]<-0
}
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);data;current;goal
}
}
return(data)
}
res1<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved="all",fromColumns=c("flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSeptic_urb","flushPit_urb"),context="urban")
res1
res2<-slide(data=res1,precision=0.001,moved="all",fromColumns=c("flushOpen_rur","flushUnknown_rur"),toColumns=c("flushSeptic_rur","flushPit_rur"),context="rural")
res2
rowSums(res2[,c(13:25)])
rowSums(res2[,c(36:48)])
res3<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved=0.1,fromColumns=c("flushSeptic_urb","flushPit_urb","flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSewer_urb"),context="urban")
res3
res4
res4<-slide(data=res3,precision=0.001,moved=0.1,fromColumns=c("flushSeptic_rur","flushPit_rur","flushOpen_rur","flushUnknown_rur"),toColumns=c("flushSewer_rur"),context="rural")
res4
rowSums(res4[,c(13:25)])
rowSums(res4[,c(36:48)])
slide<-function(data,precision,moved,fromColumns,toColumns,context){
View(slide)
function(data,precision,moved,fromColumns,toColumns,context){
mf<-data.frame(urban=data$fraction_urban_pop,rural=1-data$fraction_urban_pop)
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);current
available<-rowSums(as.data.frame(data[,fromColumns]));available
spliceFr<-data[,fromColumns]/available
alreadyThere<-rowSums(as.data.frame(data[,toColumns]));alreadyThere
spliceTo<-data[,toColumns]/alreadyThere
if(moved=="all"){
data[,toColumns]<-data[,toColumns]+available*spliceTo
data[,fromColumns]<-0
dataOut<-data
}else{
dataAside<-data.frame()
goal<-current+moved
while(current<goal){
available<-rowSums(as.data.frame(data[,fromColumns]))
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
alreadyThere[which(available==0)]<-999
ofNeed<-which.min(alreadyThere)
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
spliceFr<-data[,fromColumns]/available
spliceTo<-data[,toColumns]/alreadyThere
if(length(fromColumns)>1){sF<-spliceFr[ofNeed,]}else{sF<-spliceFr[ofNeed]}
if(length(toColumns)>1){sT<-spliceTo[ofNeed,]}else{sT<-spliceTo[ofNeed]}
wouldBeNegative<-any( data[ofNeed,fromColumns]-precision*sF < 0 )
if(wouldBeNegative==F | is.na(wouldBeNegative)){ #checks to see if the values in the fromColumns would become negative and if so, then it dumps all remaining percentages into the toColumn
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+precision*sT
data[ofNeed,fromColumns]<-data[ofNeed,fromColumns]-precision*sF
}else{
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+sum(data[ofNeed,fromColumns])*sT
data[ofNeed,fromColumns]<-0
}
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);data;current;goal
}
}
return(data)
}
slide=function(data,precision,moved,fromColumns,toColumns,context){
slide<-function(data,precision,moved,fromColumns,toColumns,context){
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);current
available<-rowSums(as.data.frame(data[,fromColumns]));available
spliceFr<-data[,fromColumns]/available
alreadyThere<-rowSums(as.data.frame(data[,toColumns]));alreadyThere
spliceTo<-data[,toColumns]/alreadyThere
if(moved=="all"){
data[,toColumns]<-data[,toColumns]+available*spliceTo
data[,fromColumns]<-0
dataOut<-data
}else{
dataAside<-data.frame()
goal<-current+moved
while(current<goal){
available<-rowSums(as.data.frame(data[,fromColumns]))
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
alreadyThere[which(available==0)]<-999
ofNeed<-which.min(alreadyThere)
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
spliceFr<-data[,fromColumns]/available
spliceTo<-data[,toColumns]/alreadyThere
if(length(fromColumns)>1){sF<-spliceFr[ofNeed,]}else{sF<-spliceFr[ofNeed]}
if(length(toColumns)>1){sT<-spliceTo[ofNeed,]}else{sT<-spliceTo[ofNeed]}
wouldBeNegative<-any( data[ofNeed,fromColumns]-precision*sF < 0 )
if(wouldBeNegative==F | is.na(wouldBeNegative)){ #checks to see if the values in the fromColumns would become negative and if so, then it dumps all remaining percentages into the toColumn
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+precision*sT
data[ofNeed,fromColumns]<-data[ofNeed,fromColumns]-precision*sF
}else{
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+sum(data[ofNeed,fromColumns])*sT
data[ofNeed,fromColumns]<-0
}
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);data;current;goal
}
}
slide<-function(data,precision,moved,fromColumns,toColumns,context){
mf<-data.frame(urban=data$fraction_urban_pop,rural=1-data$fraction_urban_pop)
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);current
available<-rowSums(as.data.frame(data[,fromColumns]));available
spliceFr<-data[,fromColumns]/available
alreadyThere<-rowSums(as.data.frame(data[,toColumns]));alreadyThere
spliceTo<-data[,toColumns]/alreadyThere
if(moved=="all"){
data[,toColumns]<-data[,toColumns]+available*spliceTo
data[,fromColumns]<-0
dataOut<-data
}else{
dataAside<-data.frame()
goal<-current+moved
while(current<goal){
available<-rowSums(as.data.frame(data[,fromColumns]))
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
alreadyThere[which(available==0)]<-999
ofNeed<-which.min(alreadyThere)
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
spliceFr<-data[,fromColumns]/available
spliceTo<-data[,toColumns]/alreadyThere
if(length(fromColumns)>1){sF<-spliceFr[ofNeed,]}else{sF<-spliceFr[ofNeed]}
if(length(toColumns)>1){sT<-spliceTo[ofNeed,]}else{sT<-spliceTo[ofNeed]}
wouldBeNegative<-any( data[ofNeed,fromColumns]-precision*sF < 0 )
if(wouldBeNegative==F | is.na(wouldBeNegative)){ #checks to see if the values in the fromColumns would become negative and if so, then it dumps all remaining percentages into the toColumn
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+precision*sT
data[ofNeed,fromColumns]<-data[ofNeed,fromColumns]-precision*sF
}else{
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+sum(data[ofNeed,fromColumns])*sT
data[ofNeed,fromColumns]<-0
}
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);data;current;goal
}
}
return(data)
}
res3<-slide(data=read.csv("data/InputFile.csv"),precision=0.001,moved=0.1,fromColumns=c("flushSeptic_urb","flushPit_urb","flushOpen_urb","flushUnknown_urb"),toColumns=c("flushSewer_urb"),context="urban")
slide<-function(data,precision,moved,fromColumns,toColumns,context){
slide<-function(data,precision,moved,fromColumns,toColumns,context){
mf<-data.frame(urban=data$fraction_urban_pop,rural=1-data$fraction_urban_pop)
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);current
available<-rowSums(as.data.frame(data[,fromColumns]));available
spliceFr<-data[,fromColumns]/available
alreadyThere<-rowSums(as.data.frame(data[,toColumns]));alreadyThere
spliceTo<-data[,toColumns]/alreadyThere
if(moved=="all"){
data[,toColumns]<-data[,toColumns]+available*spliceTo
data[,fromColumns]<-0
dataOut<-data
}else{
dataAside<-data.frame()
goal<-current+moved
while(current<goal){
available<-rowSums(as.data.frame(data[,fromColumns]))
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
alreadyThere[which(available==0)]<-999
ofNeed<-which.min(alreadyThere)
alreadyThere<-rowSums(as.data.frame(data[,toColumns]))
spliceFr<-data[,fromColumns]/available
spliceTo<-data[,toColumns]/alreadyThere
if(length(fromColumns)>1){sF<-spliceFr[ofNeed,]}else{sF<-spliceFr[ofNeed]}
if(length(toColumns)>1){sT<-spliceTo[ofNeed,]}else{sT<-spliceTo[ofNeed]}
wouldBeNegative<-any( data[ofNeed,fromColumns]-precision*sF < 0 )
if(wouldBeNegative==F | is.na(wouldBeNegative)){ #checks to see if the values in the fromColumns would become negative and if so, then it dumps all remaining percentages into the toColumn
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+precision*sT
data[ofNeed,fromColumns]<-data[ofNeed,fromColumns]-precision*sF
}else{
data[ofNeed,toColumns]<-data[ofNeed,toColumns]+sum(data[ofNeed,fromColumns])*sT
data[ofNeed,fromColumns]<-0
}
current<-sum(data$population*mf[,context]*data[,toColumns])/sum(data$population*mf[,context]);data;current;goal
}
}
return(data)
}
slide(data=res1,precision=0.001,moved="all",fromColumns=c("flushOpen_rur","flushUnknown_rur"),toColumns=c("flushSeptic_rur","flushPit_rur"),context="rural")
