remainingTwinUrea<-exp(-kValues["urine-diverting w/ urea",i]*(seq(daysperyear*emptyFrequency,1,by=-1)+daysperyear*emptyFrequency-1));remainingTwinUrea<-replace(remainingTwinUrea,which(remainingTwinUrea<0.001),0.001)
toFSTP_twin_noUDT<-loadings[[m]]$twinPits[j]*(1-loadings[[m]]$pitAdd[j])*(1-loadings[[m]]$UDT[j])*sum(remainingTwinNoUD*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
toFSTP_twin_UDT<-loadings[[m]]$twinPits[j]*(1-loadings[[m]]$pitAdd[j])*(loadings[[m]]$UDT[j])*sum(remainingTwinUD*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
toFSTP_twin_lime<-loadings[[m]]$twinPits[j]*(loadings[[m]]$pitAdd[j])*(1-loadings[[m]]$UDT[j])*sum(remainingTwinNoUD*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
toFSTP_twin_urea<-loadings[[m]]$twinPits[j]*(loadings[[m]]$pitAdd[j])*(loadings[[m]]$UDT[j])*sum(remainingTwinUD*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
loadings[[m]]$toFSTP_twin[j]<-toFSTP_twin_noUDT+toFSTP_twin_UDT+toFSTP_twin_lime+toFSTP_twin_urea
safeDecay_twin_noUDT<-loadings[[m]]$twinPits[j]*(1-loadings[[m]]$pitAdd[j])*(1-loadings[[m]]$UDT[j])*sum((1-remainingTwinNoUD)*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
safeDecay_twin_UDT<-loadings[[m]]$twinPits[j]*(1-loadings[[m]]$pitAdd[j])*(loadings[[m]]$UDT[j])*sum((1-remainingTwinUD)*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
safeDecay_twin_lime<-loadings[[m]]$twinPits[j]*(loadings[[m]]$pitAdd[j])*(1-loadings[[m]]$UDT[j])*sum((1-remainingTwinNoUD)*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
safeDecay_twin_urea<-loadings[[m]]$twinPits[j]*(loadings[[m]]$pitAdd[j])*(loadings[[m]]$UDT[j])*sum((1-remainingTwinUD)*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
loadings[[m]]$safeDecay_twin[j]<-safeDecay_twin_noUDT+safeDecay_twin_UDT+safeDecay_twin_lime+safeDecay_twin_urea
remainingSingleNoUD<-exp(-kValues["conventional",i]*(seq(daysperyear*emptyFrequency,1,by=-1)));remainingSingleNoUD<-replace(remainingSingleNoUD,which(remainingSingleNoUD<0.001),0.001)
remainingSingleUD<-exp(-kValues["urine-diverting",i]*(seq(daysperyear*emptyFrequency,1,by=-1)));remainingSingleUD<-replace(remainingSingleUD,which(remainingSingleUD<0.001),0.001)
remainingSingleLime<-exp(-kValues["conventional w/ lime",i]*(seq(daysperyear*emptyFrequency,1,by=-1)));remainingSingleLime<-replace(remainingSingleLime,which(remainingSingleLime<0.001),0.001)
remainingSingleUrea<-exp(-kValues["urine-diverting w/ urea",i]*(seq(daysperyear*emptyFrequency,1,by=-1)));remainingSingleUrea<-replace(remainingSingleUrea,which(remainingSingleUrea<0.001),0.001)
toFSTP_sing_noUDT<-loadings[[m]]$singlePits[j]*(1-loadings[[m]]$pitAdd[j])*(1-loadings[[m]]$UDT[j])*sum(remainingSingleNoUD*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
toFSTP_sing_UDT<-loadings[[m]]$singlePits[j]*(1-loadings[[m]]$pitAdd[j])*(loadings[[m]]$UDT[j])*sum(remainingSingleUD*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
toFSTP_sing_lime<-loadings[[m]]$singlePits[j]*(loadings[[m]]$pitAdd[j])*(1-loadings[[m]]$UDT[j])*sum(remainingSingleNoUD*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
toFSTP_sing_urea<-loadings[[m]]$singlePits[j]*(loadings[[m]]$pitAdd[j])*(loadings[[m]]$UDT[j])*sum(remainingSingleUD*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
loadings[[m]]$toFSTP_sing[j]<-toFSTP_sing_noUDT+toFSTP_sing_UDT+toFSTP_sing_lime+toFSTP_sing_urea
safeDecay_sing_noUDT<-loadings[[m]]$singlePits[j]*(1-loadings[[m]]$pitAdd[j])*(1-loadings[[m]]$UDT[j])*sum((1-remainingSingleNoUD)*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
safeDecay_sing_UDT<-loadings[[m]]$singlePits[j]*(1-loadings[[m]]$pitAdd[j])*(loadings[[m]]$UDT[j])*sum((1-remainingSingleUD)*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
safeDecay_sing_lime<-loadings[[m]]$singlePits[j]*(loadings[[m]]$pitAdd[j])*(1-loadings[[m]]$UDT[j])*sum((1-remainingSingleNoUD)*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
safeDecay_sing_urea<-loadings[[m]]$singlePits[j]*(loadings[[m]]$pitAdd[j])*(loadings[[m]]$UDT[j])*sum((1-remainingSingleUD)*loadings[[m]]$inSolid[j]/daysperyear*loadings[[m]]$safeEmpty[j])/emptyFrequency
loadings[[m]]$safeDecay_sing[j]<-safeDecay_sing_noUDT+safeDecay_sing_UDT+safeDecay_sing_lime+safeDecay_sing_urea
}
loadings[[m]]$totalDecayed<-loadings[[m]]$unsafeDecay_twin+loadings[[m]]$unsafeDecay_sing+loadings[[m]]$safeDecay_twin+loadings[[m]]$safeDecay_sing
loadings[[m]]$toSW<-loadings[[m]]$notContained+loadings[[m]]$toSW_sol_twin+loadings[[m]]$toSW_sol_sing+loadings[[m]]$toSW_liq
loadings[[m]]$toFSTP<-loadings[[m]]$toFSTP_twin+loadings[[m]]$toFSTP_sing
loadings[[m]]$stillViable<-loadings[[m]][,"toGW"]+loadings[[m]][,"toSW"]+loadings[[m]][,"toWWTP"]+loadings[[m]][,"toFSTP_twin"]+loadings[[m]][,"toFSTP_sing"]
loadings[[m]]$LRV_byTech<-round(log10(loadings[[m]][,"excreted"]/loadings[[m]][,"stillViable"]),2)
loadings[[m]]$LRV_byTech[is.na(loadings[[m]]$LRV_byTech)]<-NA
#loadings[[m]]$excreted_check<-loadings[[m]]$toGW+loadings[[m]]$toSW+loadings[[m]]$totalSubsurface+loadings[[m]]$totalDecayed+loadings[[m]]$toFSTP+loadings[[m]]$toWWTP
LRV_byTechnology <- as.data.frame(t(loadings[[m]]$LRV_byTech))
colnames(LRV_byTechnology) <- paste("LRV_",loadings[[m]]$name,sep="")
LRV_byTechnology[is.na(LRV_byTechnology)]<-NA
### CALCULATE EMISSIONS ###
excreted=sum(loadings[[m]]$excreted)
to_groundwater=sum(loadings[[m]]$toGW)
to_surface=sum(loadings[[m]]$toSW)
retained_in_soil=sum(loadings[[m]]$totalSubsurface)
decayed=sum(loadings[[m]]$totalDecayed)
In_Sewage=sum(loadings[[m]]$toWWTP)
In_Fecal_Sludge=sum(loadings[[m]]$toFSTP_twin)+sum(loadings[[m]]$toFSTP_sing)
excreted_check<-sum(to_groundwater,to_surface,retained_in_soil,decayed,In_Sewage,In_Fecal_Sludge)
loadings[[m]]<-loadings[[m]][,c("name","classification","percentage","excreted","toGW","toSW","totalSubsurface","totalDecayed","toFSTP","toWWTP","stillViable","LRV_byTech")]
names(loadings[[m]])<-c("id","sanitationTechnology","percentage","excreted","toGroundwater","toSurface","inSubsurface","decayed","fecalSludge","sewerage","stillViable","onsiteLRV")
newRow<-data.frame(gid=df$gid,excreted,excreted_check,to_groundwater,to_surface,retained_in_soil,decayed,
In_Fecal_Sludge,In_Sewage,stillViable=(to_groundwater+to_surface+In_Sewage+In_Fecal_Sludge),
Onsite_LRV=round(log10(excreted/(to_groundwater+to_surface+In_Sewage+In_Fecal_Sludge)),2),
Onsite_PR=round(((excreted-(to_groundwater+to_surface+In_Sewage+In_Fecal_Sludge))/excreted),4))
onsite_results=rbind(onsite_results,newRow)
}
#return(list(detailed=loadings,summary=onsite_results[complete.cases(onsite_results),]))
returned<-list(input=df1,
det=loadings,
output=onsite_results[complete.cases(onsite_results),]
)
return(returned)
}
myLoadings=getLoadings(inputDF=read.csv("data/input_file_new_kla_div_20200728.csv"))
for(i in 1:length(myLoadings$det)){
myLoadings$det[[i]]$emitPC <- round((myLoadings$det[[i]]$toSurface + myLoadings$det[[i]]$toGroundwater) / myLoadings$input$population[i] * t(myLoadings$input[i,][,c("flushSewer","flushSeptic","flushPit","flushOpen","flushUnknown","pitSlab","pitNoSlab","compostingTwinSlab","compostingTwinNoSlab","compostingToilet","bucketLatrine","containerBased","hangingToilet","openDefecation","other")])[,1],0)
myLoadings$det[[i]]$emitPC[is.na(myLoadings$det[[i]]$emitPC)]<-0
plot1<-data.frame(sanTechCat=c("1 Flush Toilets (Sewered)",rep("2 Flush Toilets (Onsite)",4),rep("4 Dry Toilets",2),rep("3 Composting Toilets",3),rep("4 Dry Toilets",2),rep("5 Open Defecation",3)),myLoadings$det[[i]][,c("sanitationTechnology","emitPC")])
plot2<-aggregate(emitPC~sanTechCat,data=plot1,FUN=sum)
plotMe<-if(i==1){data.frame(Category=plot2[,1],plot2[i+1])}else{cbind(plotMe,plot2[,2])}
names(plotMe)[i+1]<-as.character(myLoadings$input$region[i])
}
plotMe<-tidyr::gather(plotMe,key=region,value=emissionsPerCapita,-Category)
length(myLoadings$det)
i
myLoadings$det[[i]]$emitPC <- round((myLoadings$det[[i]]$toSurface + myLoadings$det[[i]]$toGroundwater) / myLoadings$input$population[i] * t(myLoadings$input[i,][,c("flushSewer","flushSeptic","flushPit","flushOpen","flushUnknown","pitSlab","pitNoSlab","compostingTwinSlab","compostingTwinNoSlab","compostingToilet","bucketLatrine","containerBased","hangingToilet","openDefecation","other")])[,1],0)
myLoadings$det[[i]]$emitPC <- round((myLoadings$det[[i]]$toSurface + myLoadings$det[[i]]$toGroundwater) / myLoadings$input$population[i] * t(myLoadings$input[i,][,c("flushSewer","flushSeptic","flushPit","flushOpen","flushUnknown","pitSlab","pitNoSlab","compostingToilet","bucketLatrine","containerBased","hangingToilet","openDefecation","other")])[,1],0)
myLoadings$det[[i]]$emitPC
myLoadings$det[[i]]$emitPC[is.na(myLoadings$det[[i]]$emitPC)]<-0
plot1<-data.frame(sanTechCat=c("1 Flush Toilets (Sewered)",rep("2 Flush Toilets (Onsite)",4),rep("4 Dry Toilets",2),rep("3 Composting Toilets",3),rep("4 Dry Toilets",2),rep("5 Open Defecation",3)),myLoadings$det[[i]][,c("sanitationTechnology","emitPC")])
plot1<-data.frame(sanTechCat=c("1 Flush Toilets (Sewered)",rep("2 Flush Toilets (Onsite)",4),rep("4 Dry Toilets",2),rep("3 Composting Toilets",1),rep("4 Dry Toilets",2),rep("5 Open Defecation",3)),myLoadings$det[[i]][,c("sanitationTechnology","emitPC")])
plot2<-aggregate(emitPC~sanTechCat,data=plot1,FUN=sum)
plotMe<-if(i==1){data.frame(Category=plot2[,1],plot2[i+1])}else{cbind(plotMe,plot2[,2])}
names(plotMe)[i+1]<-as.character(myLoadings$input$region[i])
plotMe
as.character(myLoadings$input$region[i])
for(i in 1:length(myLoadings$det)){
myLoadings$det[[i]]$emitPC <- round((myLoadings$det[[i]]$toSurface + myLoadings$det[[i]]$toGroundwater) / myLoadings$input$population[i] * t(myLoadings$input[i,][,c("flushSewer","flushSeptic","flushPit","flushOpen","flushUnknown","pitSlab","pitNoSlab","compostingToilet","bucketLatrine","containerBased","hangingToilet","openDefecation","other")])[,1],0)
myLoadings$det[[i]]$emitPC[is.na(myLoadings$det[[i]]$emitPC)]<-0
plot1<-data.frame(sanTechCat=c("1 Flush Toilets (Sewered)",rep("2 Flush Toilets (Onsite)",4),rep("4 Dry Toilets",2),rep("3 Composting Toilets",1),rep("4 Dry Toilets",2),rep("5 Open Defecation",3)),myLoadings$det[[i]][,c("sanitationTechnology","emitPC")])
plot2<-aggregate(emitPC~sanTechCat,data=plot1,FUN=sum)
plotMe<-if(i==1){data.frame(Category=plot2[,1],plot2[i+1])}else{cbind(plotMe,plot2[,2])}
names(plotMe)[i+1]<-as.character(myLoadings$input$gid[i])
}
plotMe<-tidyr::gather(plotMe,key=gid,value=emissionsPerCapita,-Category)
plotMe$emissionsPerCapita<-as.numeric(plotMe$emissionsPerCapita)
ggplot2::ggplot(data=plotMe,ggplot2::aes(x=gid,y=emissionsPerCapita,fill=Category)) +
ggplot2::geom_bar(stat="identity") + ggplot2::theme_classic() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust=1))
require(igraph)
require(networkD3)
devtools::install_github('mverbyla/pathogenflows')
require(pathogenflows)
plotIt<-function(sketcherResults){
myNodes<-data.frame(name=make.names(sketcherResults$nodes$subType,unique=T),id=sketcherResults$nodes$name)
myNodes$newID<-rownames(myNodes)
myLinks<-data.frame(source=sketcherResults$arrows$us_node,target=sketcherResults$arrows$ds_node,value=sketcherResults$arrows$relativeLoading*100)
lookup<-myNodes[,c("id","newID")]
myLinks$source<-as.integer(lookup$newID[match(myLinks$source,lookup$id)])-1
myLinks$target<-as.integer(lookup$newID[match(myLinks$target,lookup$id)])-1
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 12, nodeWidth = 30)
}
sketched<-pathogenflows::getLRV( #WSP system
mySketch="http://data.waterpathogens.org/dataset/d6c03a14-ed8e-4136-896b-89e806f61bd6/resource/b5f5254b-5a5b-4570-810e-c7155c4a6f27/download/wastestabilizationpondsystem.json",
pathogenType="Virus",inSewage=10000000000,inFecalSludge=10000000000)
sketched<-pathogenflows::getLRV( #Trickling filter system
mySketch="http://data.waterpathogens.org/dataset/fae7f810-95d1-4aa9-9b5c-59b13e075e4e/resource/c23706fd-aebc-459e-80e1-f617a910149a/download/tricklingfiltersystem.json",
pathogenType="Helminth",inSewage=10000000000,inFecalSludge=10000000000)
sketched<-pathogenflows::getLRV(pathogenType="Helminth")
plotIt(sketched)
sketched
sketcherResults<-sketched
myNodes<-data.frame(name=make.names(sketcherResults$nodes$subType,unique=T),id=sketcherResults$nodes$name)
myNodes$newID<-rownames(myNodes)
myLinks<-data.frame(source=sketcherResults$arrows$us_node,target=sketcherResults$arrows$ds_node,value=sketcherResults$arrows$relativeLoading*100)
lookup<-myNodes[,c("id","newID")]
myLinks$source<-as.integer(lookup$newID[match(myLinks$source,lookup$id)])-1
myLinks$target<-as.integer(lookup$newID[match(myLinks$target,lookup$id)])-1
myLinks
myLinks
sketcherResults$arrows$us_node
sketcherResults$arrows
sketcherResults$nodes
getwd()
mySketch="../FERsketch.json"
myLRVdata="http://data.waterpathogens.org/dataset/eda3c64c-479e-4177-869c-93b3dc247a10/resource/9e172f8f-d8b5-4657-92a4-38da60786327/download/treatmentdata.csv"
pathogenType="Virus"
inFecalSludge=0
inSewage=10000000000
k2pdata<-read.csv(myLRVdata,header=T)
suppressWarnings(k2pdata$SQRTlrv<-sqrt(k2pdata$lrv))
suppressWarnings(k2pdata$llrv<-log(k2pdata$lrv))
suppressWarnings(k2pdata$pathogen<-k2pdata$pathogen_group)
suppressWarnings(k2pdata$lhrt<-log(k2pdata$hrt_days))
suppressWarnings(k2pdata$SQRThrt<-sqrt(k2pdata$hrt_days))
suppressWarnings(k2pdata$SQRTht<-sqrt(k2pdata$holdingtime_days))
suppressWarnings(k2pdata$ldepth<-log(k2pdata$depth_meters))
suppressWarnings(k2pdata$temp<-k2pdata$temperature_celsius)
suppressWarnings(k2pdata$temp2<-k2pdata$temperature_celsius^2)
suppressWarnings(k2pdata$temp3<-k2pdata$temperature_celsius^3)
suppressWarnings(k2pdata$ltemp<-log(k2pdata$temperature_celsius))
suppressWarnings(k2pdata$SQRTmoist<-sqrt(k2pdata$moisture_content_percent))
lambdas<-c(Virus=0.2,Bacteria=0.3,Protozoa=0.6,Helminth=0.99) # these lambda values are based on data from the literature (Chauret et al., 1999; Lucena et al., 2004; Ramo et al., 2017; Rose et al., 1996; Tanji et al., 2002; Tsai et al., 1998)
lambda<-as.numeric(lambdas[pathogenType])
results<-data.frame(In_Fecal_Sludge=inFecalSludge,In_Sewage=inSewage,Sludge_Biosolids=NA,Liquid_Effluent=NA,Centralized_LRV=NA)
sketch=jsonlite::read_json(mySketch,simplifyVector = T)
#pData=read.csv(myData,header=T)
sketch$temperature<-as.double(sketch$temperature)
sketch$surfaceArea<-as.double(sketch$surfaceArea)
sketch$flowRate<-as.double(sketch$flowRate)
sketch$depth<-as.double(sketch$depth)
sketch$holdingTime<-as.double(sketch$holdingTime)
sketch$moistureContent<-as.double(sketch$moistureContent)/100
########((((((((this is the beginning of the old getNodes function))))))))
#res<-suppressWarnings(getNodes(sketch = sketch, nodes = sketch[,-c(2,3)]))
drop <- c("x","y","parents","children")
nodes = sketch[,!(names(sketch) %in% drop)]
nodes$number_inputs<-NA
nodes$number_outputs<-NA
for(i in 1:nrow(sketch)){
nodes$number_inputs[i]<-length(sketch[["parents"]][[i]])
nodes$number_outputs[i]<-length(sketch[["children"]][[i]])
}
nodes$loading_output=NA
sn<-sketch[,c("parents","children")]
sn$me<-as.character(sketch[,c("name")])
numParents<-rep(NA,length(sn[,1]))
rem<-NA;j=0
suppressWarnings(  # this for loop turns all NULL parents and children to NA values, and it counts the number of parents (numParents) each node has
for(i in 1:length(sn[,1])){
numParents[i]<-if(is.null(length(sn[i,1][[1]]))){0}else{length(sn[i,1][[1]])}
if(is.null(sn$parents[[i]]) | rlang::is_empty(sn$parents[[i]])){sn[i,1][[1]]<-NA}
if(is.null(sn$children[[i]]) | rlang::is_empty(sn$children[[i]])){sn[i,2][[1]]<-NA}
if(is.na(sn[[1]][[i]])){
j=j+1;rem[j]<-i
}
}
)
orph<-which(numParents==0)
arrows<-data.frame(us_node=rep(NA,sum(numParents)),ds_node=rep(NA,sum(numParents)))
sn<-sn[-orph,];rownames(sn)<-1:nrow(sn)
m=1
for(i in 1:nrow(sn)){
for(j in 1:length(sn[i,"parents"][[1]])){
arrows$us_node[m]<-sn[i,"parents"][[1]][j]
arrows$ds_node[m]<-sn$me[i]
m=m+1
}
}
arrows$loading<-NA
rownames(nodes)<-nodes$name
arrows$siblings<-nodes[arrows$us_node,"number_outputs"]
arrows$flowtype<-nodes[arrows$ds_node,"matrix"]
arrows$siblings_solid<-NA
arrows$siblings_liquid<-NA
arrows$iamsolid<-NA
arrows$flowRate<-NA
nodes[nodes$flowRate==0,]$flowRate<-NA
for(i in 1:nrow(arrows)){
arrows$siblings_solid[i]<-sum(arrows$flowtype[which(arrows$us_node==arrows$us_node[i])]=="solid")
arrows$siblings_liquid[i]<-sum(arrows$flowtype[which(arrows$us_node==arrows$us_node[i])]=="liquid")
if(arrows$flowtype[i]=="solid"){arrows$iamsolid[i]<-TRUE}else{arrows$iamsolid[i]<-FALSE}
}
####(((((((this is the end of the old getNodes function)))))))
# Here the flow rates and volumes are used to calculate retention times
# solve the DAG for the flow rate
i=1;j=1;stuck=1   # here, j is an index for the nodes, i is an index for the arrows, stuck prevents the loop from getting infinitely stuck
nN<-nodes$name
keepGoing=TRUE
# this next monstrosity of a line finds all arrows who's parents are a source, then divides the parent's source load by the number of siblings to calculate the load in these "special" arrows.
arrows[which(arrows$us_node %in% nodes[nodes$ntype=="source",]$name),]$flowRate<-nodes[arrows[which(arrows$us_node %in% nodes[nodes$ntype=="source",]$name),]$us_node,]$flowRate/arrows[which(arrows$us_node %in% nodes[nodes$ntype=="source",]$name),]$siblings
while (keepGoing==TRUE){       ##### each loop focuses on a single node (nN[j+1]) and the arrow (i+1) that is going into it
if(any(arrows$ds_node==(nN[j]))==TRUE & is.na(sum(arrows[which(arrows$ds_node==(nN[j])),]$flowRate))==FALSE){       #2. DO I KNOW THE LOADINGS OF ARROWS COMING INTO ME               # if there are any arrows coming into me (Node nN[j])...
nodes[nN[j],]$flowRate=sum(arrows[which(arrows$ds_node==(nN[j])),]$flowRate)  # then get the sum of all arrows coming into me (nN[j]), minus my LRV, to calculate my output flow
}
if(arrows[i,]$iamsolid==TRUE & arrows[i,]$siblings_liquid>0){    #CALCULATES THE LOADING IN THIS ARROW     # if this arrow is a solid but has liquid siblings
arrows[i,]$flowRate=nodes[arrows[i,]$us_node,]$flowRate*0.1/arrows[i,]$siblings_solid          # then use the factor 0.1 to divide the flow up between liquid vs. solid
}else{
if(arrows[i,]$iamsolid==FALSE & arrows[i,]$siblings_solid>0){   #CALCULATES THE LOADING IN THIS ARROW     # if this arrow is a liquid but has solid siblings
arrows[i,]$flowRate=nodes[arrows[i,]$us_node,]$flowRate*(0.9)/arrows[i,]$siblings_liquid     # then use the factor 0.9 to divide the flow up between liquid vs. solid
}else{arrows[i,]$flowRate=nodes[arrows[i,]$us_node,]$flowRate/arrows[i,]$siblings}                  # otherwise this arrow only has siblings that are the same as it (could be liquid or solid, but they're all the same), so just divide the loading by the number of siblings
}
stuck<-stuck+1
if(i==(nrow(arrows))){i=1} else {i=i+1}
if(j==(nrow(nodes))){j=1} else {j=j+1}
if(stuck==1000){keepGoing = FALSE} else {keepGoing = (any(is.na(arrows$flowRate)) == TRUE | any(is.na(nodes$flowRate)) == TRUE)};arrows;nodes[,c("subType","flowRate")];nN[j];keepGoing
}
nodes[nodes$volume==0,]$volume<-nodes[nodes$volume==0,]$surfaceArea*nodes[nodes$volume==0,]$depth
nodes$retentionTime<-nodes$volume/nodes$flowRate
# end of new script
# transform the K2P data and fit the models
# k2pdata<-suppressWarnings(transformData(k2pdata))
fit_ap<-lm(SQRTlrv ~ SQRThrt+temp+factor(pathogen),data=subset(k2pdata,technology_description=="Anaerobic Pond"))
fit_fp<-lm(SQRTlrv ~ lhrt+temp+factor(pathogen),data=subset(k2pdata,technology_description=="Facultative Pond"|technology_description=="Maturation Pond"))
fit_mp<-lm(SQRTlrv ~ lhrt+temp+factor(pathogen),data=subset(k2pdata,technology_description=="Facultative Pond"|technology_description=="Maturation Pond"))
fit_db<-lm(SQRTlrv ~ SQRTht+SQRTmoist+factor(pathogen),data=subset(k2pdata,technology_description=="Sludge Drying Bed"))
fit_tf<-lm(SQRTlrv ~ factor(pathogen),data=subset(k2pdata,technology_description=="Trickling Filter"))
fit_sd<-lm(SQRTlrv ~ factor(pathogen),data=subset(k2pdata,technology_description=="Sedimentation"))
# find the LRVs for each pathogen group, then solve the DAG!
pathogenGroups<-c("Virus","Bacteria","Protozoa","Helminth")
warnings<-vector(mode="character",length=0)
if(results$In_Fecal_Sludge>0 & any(nodes$subType=="fecal sludge")==FALSE){ #if the onsite system produces fecal sludge but the treatment plant does not accept any
results$To_Surface<-results$In_Fecal_Sludge
warnings[length(warnings)+1]<-"Warning: The onsite sanitation technologies in your system produce fecal sludge, but according to your sketch, the treatment plant does not accept fecal sludge."
results$In_Fecal_Sludge<-0
skipFS<-TRUE
}else{skipFS<-FALSE}
if(results$In_Sewage>0 & any(nodes$subType=="sewerage")==FALSE){ #if the onsite system produces sewerage but the treatment plant does not accept any
results$To_Surface<-results$In_Sewage
warnings[length(warnings)+1]<-"Warning: The onsite sanitation technologies in your system produce sewage, but according to your sketch, the treatment plant does not accept sewage."
results$In_Sewage<-0
skipWW<-TRUE
}else{skipWW<-FALSE}
nodes$loading_output<-NA
arrows$loading<-NA
if(skipFS==FALSE){nodes[nodes$subType=="fecal sludge",]$loading_output<-results$In_Fecal_Sludge}
if(skipWW==FALSE){nodes[nodes$subType=="sewerage",]$loading_output<-results$In_Sewage}
####(((((((this is the beginning of the old estimate, or getLRVs function)))))))
# get the LRVs for each node
#nodes<-estimate(nodes,pathogenType=pathogenType)
# transformation of user data to make predictions
nodes$lhrt<-NA
nodes$lhrt[nodes$subType=="anaerobic pond"|nodes$subType=="facultative pond"|nodes$subType=="maturation pond"]<-log(nodes$retentionTime[nodes$subType=="anaerobic pond"|nodes$subType=="facultative pond"|nodes$subType=="maturation pond"])
nodes$SQRThrt<-sqrt(nodes$retentionTime)
nodes$SQRTht<-sqrt(nodes$holdingTime)
nodes$ldepth<-NA
nodes$ldepth[nodes$subType=="anaerobic pond"|nodes$subType=="facultative pond"|nodes$subType=="maturation pond"]<-log(nodes$depth[nodes$subType=="anaerobic pond"|nodes$subType=="facultative pond"|nodes$subType=="maturation pond"])
nodes$temp<-nodes$temperature
nodes$temp2<-nodes$temperature^2
nodes$temp3<-nodes$temperature^3
nodes$ltemp<-NA
nodes$ltemp[nodes$subType=="sludge drying bed"]<-log(nodes$temperature[nodes$subType=="sludge drying bed"])
nodes$ltemp<-log(nodes$temperature)
nodes$SQRTmoist<-sqrt(as.double(nodes$moistureContent))
nodes$pathogen<-pathogenType
nodes$fit<-0;nodes$upr<-0;nodes$lwr<-0
# execution of models
if(any(nodes$subType=="anaerobic pond")==TRUE){nodes[nodes$subType=="anaerobic pond",c("fit","lwr","upr")]<-predict(fit_ap,nodes[nodes$subType=="anaerobic pond",],interval="confidence")^2}
if(any(nodes$subType=="facultative pond")==TRUE){nodes[nodes$subType=="facultative pond",c("fit","lwr","upr")]<-predict(fit_fp,nodes[nodes$subType=="facultative pond",],interval="confidence")^2}
if(any(nodes$subType=="maturation pond")==TRUE){nodes[nodes$subType=="maturation pond",c("fit","lwr","upr")]<-predict(fit_mp,nodes[nodes$subType=="maturation pond",],interval="confidence")^2}
if(any(nodes$subType=="sludge drying bed")==TRUE){
if(pathogenType=="Virus"){nodes[nodes$subType=="sludge drying bed",c("fit","lwr","upr")]<-1}else{nodes[nodes$subType=="sludge drying bed",c("fit","lwr","upr")]<-predict(fit_db,nodes[nodes$subType=="sludge drying bed",],interval="confidence")^2}
}
if(any(nodes$subType=="trickling filter")==TRUE){
if(pathogenType=="Helminth"){nodes[nodes$subType=="trickling filter",c("fit","lwr","upr")]<-1}else{nodes[nodes$subType=="trickling filter",c("fit","lwr","upr")]<-predict(fit_tf,nodes[nodes$subType=="trickling filter",],interval="confidence")^2}
}
if(any(nodes$subType=="settler or clarifier")==TRUE){
if(pathogenType=="Protozoa"|pathogenType=="Helminth"){nodes[nodes$subType=="settler or clarifier",c("fit","lwr","upr")]<-0}else{nodes[nodes$subType=="settler or clarifier",c("fit","lwr","upr")]<-predict(fit_sd,nodes[nodes$subType=="settler or clarifier",],interval="confidence")^2}
}
####placeholder LRVs until we get more data into the database####
if(any(nodes$subType=="biogas reactor")==TRUE){nodes[nodes$subType=="biogas reactor",c("fit","lwr","upr")]<-c(1,0,2)}
if(any(nodes$subType=="composting")==TRUE){nodes[nodes$subType=="composting",c("fit","lwr","upr")]<-c(1,0,2)}
if(any(nodes$subType=="activated sludge")==TRUE){nodes[nodes$subType=="activated sludge",c("fit","lwr","upr")]<-c(1,0,2)}
if(any(nodes$subType=="uasb reactor")==TRUE){nodes[nodes$subType=="uasb reactor",c("fit","lwr","upr")]<-c(1,0,2)}
if(any(nodes$subType=="media filter")==TRUE){nodes[nodes$subType=="media filter",c("fit","lwr","upr")]<-c(1,0,2)}
if(any(nodes$subType=="imhoff tank")==TRUE){nodes[nodes$subType=="imhoff tank",c("fit","lwr","upr")]<-c(1,0,2)}
if(any(nodes$subType=="aerated pond")==TRUE){nodes[nodes$subType=="aerated pond",c("fit","lwr","upr")]<-c(1,0,2)}
if(any(nodes$subType=="ss wetland")==TRUE){nodes[nodes$subType=="ss wetland",c("fit","lwr","upr")]<-c(1,0,2)}
if(any(nodes$subType=="fws wetland")==TRUE){nodes[nodes$subType=="fws wetland",c("fit","lwr","upr")]<-c(1,0,2)}
if(any(nodes$subType=="anaerobic baffled reactor")==TRUE){nodes[nodes$subType=="anaerobic baffled reactor",c("fit","lwr","upr")]<-c(1,0,2)}
if(any(nodes$subType=="chlorination")==TRUE){nodes[nodes$subType=="chlorination",c("fit","lwr","upr")]<-c(1,0,2)}
if(any(nodes$subType=="ammonia")==TRUE){nodes[nodes$subType=="ammonia",c("fit","lwr","upr")]<-c(1,0,2)}
if(any(nodes$subType=="lime treatment")==TRUE){nodes[nodes$subType=="lime treatment",c("fit","lwr","upr")]<-c(1,0,2)}
####
####(((((((this is the end of the old estimate function)))))))
nodeLRVs<-nodes[,c("name","subType","fit","lwr","upr")]
#######(((((((SOLVE IT SOLVE IT SOLVE IT)))))))
#######(((((((SOLVE IT SOLVE IT SOLVE IT)))))))
#######(((((((SOLVE IT SOLVE IT SOLVE IT)))))))
# solve the DAG
i=1;j=1;stuck=1   # here, j is an index for the nodes, i is an index for the arrows, stuck prevents the loop from getting infinitely stuck
nN<-nodes$name
keepGoing=TRUE
# this next monstrosity of a line finds all arrows who's parents are a source, then divides the parent's source load by the number of siblings to calculate the load in these "special" arrows.
arrows[which(arrows$us_node %in% nodes[nodes$ntype=="source",]$name),]$loading<-nodes[arrows[which(arrows$us_node %in% nodes[nodes$ntype=="source",]$name),]$us_node,]$loading_output/arrows[which(arrows$us_node %in% nodes[nodes$ntype=="source",]$name),]$siblings
while (keepGoing==TRUE){       ##### each loop focuses on a single node (nN[j+1]) and the arrow (i+1) that is going into it
if(any(arrows$ds_node==(nN[j]))==TRUE & is.na(sum(arrows[which(arrows$ds_node==(nN[j])),]$loading))==FALSE){       #2. DO I KNOW THE LOADINGS OF ARROWS COMING INTO ME               # if there are any arrows coming into me (Node nN[j])...
nodes[nN[j],]$loading_output=10^(log10(sum(arrows[which(arrows$ds_node==(nN[j])),]$loading))-nodes[nN[j],]$fit)  # then get the sum of all arrows coming into me (nN[j]), minus my LRV, to calculate my output loading
}
if(arrows[i,]$iamsolid==TRUE & arrows[i,]$siblings_liquid>0){    #CALCULATES THE LOADING IN THIS ARROW     # if this arrow is a solid but has liquid siblings
arrows[i,]$loading=nodes[arrows[i,]$us_node,]$loading_output*lambda/arrows[i,]$siblings_solid          # then use the factor lambda to divide the loading up between liquid vs. solid
}else{
if(arrows[i,]$iamsolid==FALSE & arrows[i,]$siblings_solid>0){   #CALCULATES THE LOADING IN THIS ARROW     # if this arrow is a liquid but has solid siblings
arrows[i,]$loading=nodes[arrows[i,]$us_node,]$loading_output*(1-lambda)/arrows[i,]$siblings_liquid     # then use the factor lambda to divide the loading up between liquid vs. solid
}else{arrows[i,]$loading=nodes[arrows[i,]$us_node,]$loading_output/arrows[i,]$siblings}                  # otherwise this arrow only has siblings that are the same as it (could be liquid or solid, but they're all the same), so just divide the loading by the number of siblings
}
stuck<-stuck+1
if(i==(nrow(arrows))){i=1} else {i=i+1}
if(j==(nrow(nodes))){j=1} else {j=j+1} ;arrows;nodes[,c("subType","loading_output")];i;j;nN[j]
if(stuck==1000){keepGoing = FALSE} else {keepGoing = (any(is.na(arrows$loading)) == TRUE | any(is.na(nodes$loading_output)) == TRUE)}
}
lrv=round(log10(sum(nodes$loading_output[nodes$ntype=="source"])/sum(nodes$loading_output[nodes$ntype=="end use"])),2)
references<-unique(k2pdata[nodes$subType %in% tolower(unique(k2pdata$technology_description)),]$bib_id)
#######(((((((I SOLVED IT!)))))))
#######(((((((I SOLVED IT!)))))))
#######(((((((I SOLVED IT!)))))))
# store the results
#arrowLoads<-solved$arrows
results$Centralized_LRV<-lrv
if(any(nodes$matrix=="liquid")){results$Liquid_Effluent<-nodes[nodes$ntype=="end use" & nodes$matrix=="liquid",]$loading_output}else{results$Liquid_Effluent<-0}
if(any(nodes$matrix=="solid")){results$Sludge_Biosolids<-sum(nodes[nodes$ntype=="end use" & nodes$matrix=="solid",]$loading_output)}else{results$Sludge_Biosolids<-0}
loadings=results
loadings$Percent_Liquid<-round(loadings$Liquid_Effluent/(loadings$Liquid_Effluent+loadings$Sludge_Biosolids)*100,1)
loadings$Percent_Solid<-round(loadings$Sludge_Biosolids/(loadings$Liquid_Effluent+loadings$Sludge_Biosolids)*100,1)
arrows$relativeLoading<-arrows$loading/(results$In_Fecal_Sludge+results$In_Sewage)
arrows$us_node_type<-nodes[arrows$us_node,]$subType
arrows$ds_node_type<-nodes[arrows$ds_node,]$subType
#****#****#****#****#
uPs<-paste(unique(nodes$subType[nodes$ntype=="unit process"]), collapse = ', ')
methods<-paste("treats ",nodes$subType[nodes$ntype=="source"][1],if(length(nodes$subType[nodes$ntype=="source"]==2)){paste(" and",nodes$subType[nodes$ntype=="source"][2])},
" using the following technologies: ",
uPs,".",sep=""
);methods
nodes[nodes$ntype=="unit process",]
#****#****#****#****#
solved<-list(arrows=arrows[,c("us_node","ds_node","loading","flowtype","us_node_type","ds_node_type","relativeLoading")],
nodes=nodes[,c("name","ntype","subType","temperature","retentionTime","depth","useCategory","moistureContent","holdingTime","matrix","loading_output","pathogen")],
loadings=loadings,
references=references)
solved
write.csv(solved$arrows,"../arrows.csv")
write.csv(solved$nodes,"../nodes.csv")
myNodes
arrows=read.csv("../arrows.csv")
nodes=read.csv("../nodes.csv")
nodes
arrows
myNodes<-data.frame(name=make.names(nodes$subType,unique=T),id=nodes$name)
nodes$name
solved
nodes=read.csv("../nodes.csv")
arrows=read.csv("../arrows.csv")
myNodes<-data.frame(name=make.names(nodes$subType,unique=T),id=nodes$name)
myNodes$newID<-rownames(myNodes)
myLinks<-data.frame(source=arrows$us_node,target=arrows$ds_node,value=arrows$relativeLoading*100)
lookup<-myNodes[,c("id","newID")]
myLinks$source<-as.integer(lookup$newID[match(myLinks$source,lookup$id)])-1
myLinks$target<-as.integer(lookup$newID[match(myLinks$target,lookup$id)])-1
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 12, nodeWidth = 30)
nodes=read.csv("../nodes.csv")
arrows.c=read.csv("../arrows-c.csv")
arrows.e=read.csv("../arrows-e.csv")
arrows<-arrows.c
myNodes<-data.frame(name=make.names(nodes$subType,unique=T),id=nodes$name)
myNodes$newID<-rownames(myNodes)
myLinks<-data.frame(source=arrows$us_node,target=arrows$ds_node,value=arrows$relativeLoading*100)
lookup<-myNodes[,c("id","newID")]
myLinks$source<-as.integer(lookup$newID[match(myLinks$source,lookup$id)])-1
myLinks$target<-as.integer(lookup$newID[match(myLinks$target,lookup$id)])-1
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 12, nodeWidth = 30)
arrows<-arrows.e
myNodes<-data.frame(name=make.names(nodes$subType,unique=T),id=nodes$name)
myNodes$newID<-rownames(myNodes)
myLinks<-data.frame(source=arrows$us_node,target=arrows$ds_node,value=arrows$relativeLoading*100)
lookup<-myNodes[,c("id","newID")]
myLinks$source<-as.integer(lookup$newID[match(myLinks$source,lookup$id)])-1
myLinks$target<-as.integer(lookup$newID[match(myLinks$target,lookup$id)])-1
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 12, nodeWidth = 30)
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
arrows<-arrows.c
myNodes<-data.frame(name=make.names(nodes$subType,unique=T),id=nodes$name)
myNodes$newID<-rownames(myNodes)
myLinks<-data.frame(source=arrows$us_node,target=arrows$ds_node,value=arrows$relativeLoading*100)
lookup<-myNodes[,c("id","newID")]
myLinks$source<-as.integer(lookup$newID[match(myLinks$source,lookup$id)])-1
myLinks$target<-as.integer(lookup$newID[match(myLinks$target,lookup$id)])-1
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
arrows<-arrows.e
myNodes<-data.frame(name=make.names(nodes$subType,unique=T),id=nodes$name)
myNodes$newID<-rownames(myNodes)
myLinks<-data.frame(source=arrows$us_node,target=arrows$ds_node,value=arrows$relativeLoading*100)
lookup<-myNodes[,c("id","newID")]
myLinks$source<-as.integer(lookup$newID[match(myLinks$source,lookup$id)])-1
myLinks$target<-as.integer(lookup$newID[match(myLinks$target,lookup$id)])-1
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
arrows<-arrows.e
myNodes<-data.frame(name=make.names(nodes$subType,unique=T),id=nodes$name)
myNodes$newID<-rownames(myNodes)
myLinks<-data.frame(source=arrows$us_node,target=arrows$ds_node,value=arrows$relativeLoading*100)
lookup<-myNodes[,c("id","newID")]
myLinks$source<-as.integer(lookup$newID[match(myLinks$source,lookup$id)])-1
myLinks$target<-as.integer(lookup$newID[match(myLinks$target,lookup$id)])-1
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
nodes=read.csv("../nodes.csv")
arrows.c=read.csv("../arrows-c.csv")
arrows.e=read.csv("../arrows-e.csv")
arrows<-arrows.c
myNodes<-data.frame(name=make.names(nodes$subType,unique=T),id=nodes$name)
myNodes$newID<-rownames(myNodes)
myLinks<-data.frame(source=arrows$us_node,target=arrows$ds_node,value=arrows$relativeLoading*100)
lookup<-myNodes[,c("id","newID")]
myLinks$source<-as.integer(lookup$newID[match(myLinks$source,lookup$id)])-1
myLinks$target<-as.integer(lookup$newID[match(myLinks$target,lookup$id)])-1
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
require(igraph)
require(networkD3)
nodes=read.csv("../nodes.csv")
arrows.c=read.csv("../arrows-c.csv")
arrows.e=read.csv("../arrows-e.csv")
arrows<-arrows.c
myNodes<-data.frame(name=make.names(nodes$subType,unique=T),id=nodes$name)
myNodes$newID<-rownames(myNodes)
myLinks<-data.frame(source=arrows$us_node,target=arrows$ds_node,value=arrows$relativeLoading*100)
lookup<-myNodes[,c("id","newID")]
myLinks$source<-as.integer(lookup$newID[match(myLinks$source,lookup$id)])-1
myLinks$target<-as.integer(lookup$newID[match(myLinks$target,lookup$id)])-1
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
arrows<-arrows.e
myNodes<-data.frame(name=make.names(nodes$subType,unique=T),id=nodes$name)
myNodes$newID<-rownames(myNodes)
myLinks<-data.frame(source=arrows$us_node,target=arrows$ds_node,value=arrows$relativeLoading*100)
lookup<-myNodes[,c("id","newID")]
myLinks$source<-as.integer(lookup$newID[match(myLinks$source,lookup$id)])-1
myLinks$target<-as.integer(lookup$newID[match(myLinks$target,lookup$id)])-1
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source", colourScale = "grey"
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source", colourScale = "grey",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source", colourScale = "#c7c7c7",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
arrows<-arrows.e
myNodes<-data.frame(name=make.names(nodes$subType,unique=T),id=nodes$name)
myNodes$newID<-rownames(myNodes)
myLinks<-data.frame(source=arrows$us_node,target=arrows$ds_node,value=arrows$relativeLoading*100)
lookup<-myNodes[,c("id","newID")]
myLinks$source<-as.integer(lookup$newID[match(myLinks$source,lookup$id)])-1
myLinks$target<-as.integer(lookup$newID[match(myLinks$target,lookup$id)])-1
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source", colourScale = "#c7c7c7",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source", colourScale = "#1f77b4",
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
sankeyNetwork(Links = myLinks, Nodes = myNodes, Source = "source", colourScale = NULL,
Target = "target", Value = "value", NodeID = "name",
units = "%", fontSize = 20, nodeWidth = 30)
